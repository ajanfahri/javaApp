/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ajan;
import static ajan.AjanCutCharts.DataGiris;
import ajan.Dialogs.DialogDxfParamFrame;
import static ajan.Serial.portList;
import com.sun.webkit.Timer;
import gnu.io.CommPortIdentifier;
//import com.sun.comm.Win32Driver;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.geom.Arc2D;
import java.awt.Toolkit;
import java.io.*;
import java.net.*;

import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import static java.lang.Math.*;
//import static java.lang.Math.cos;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
//import java.sql.Time;
//import java.time.LocalTime;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import java.sql.*;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
//import static oracle.jrockit.jfr.parser.BufferLostEvent.struct;
//import static sun.invoke.util.Wrapper.INT;
 
//public class TimerControl {
 
      
/**
 *
 * @author lin
 */




public class ajanframe extends javax.swing.JFrame{
/*
    private static void addActionListener(ActionListener actionListener) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }*/
//private final ot Ot = ot.createTestClient();
   //Timer myTimer;
//InetAddress IPAddress;
   
   static Resume Job=new Resume();
   
    static int CutStartObjNo=0,CutEndObjNo=0;
    File DxfFile,EssiFile;
    ElkontFrame elkfrm=new ElkontFrame();
    static Graph GraphMenu= new Graph();
    static MachineParameters AjanMachine=new MachineParameters();
     static CutParameters AjanCutParam=new CutParameters();
     static CncPrms CncPrmInit=new CncPrms();
     static MacPrms MacPrmInit=new MacPrms();
     static CutPrms CutPrmInit=new CutPrms();
     static  HandFunc Handy=new HandFunc();
     String[] hataliste1=new String[35];
    Connection Conn = null;
    Statement Stmt = null;
    //static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
   static final String JDBC_DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";
    
//   static final String DB_URL = "jdbc:derby://localhost:1527/pl";
    
static AjanCutCharts AjanChart;//=new AjanCutCharts(Stmt);
MachineParameterCharts MachineChart;   

//  Database credentials
   public static final String USER = "haluk";
   public static final String PASS = "ajanelek";               
   public static final String DB_URL = "jdbc:derby:pl";
Color TxtColor;    
Color BackColor;
    static int sayac=0;
    DatagramSocket socket=null;
     Socket socketTcp=null;
     //InetAddress IPAddress =InetAddress.getByName("local host");
     InetAddress IPAddress;// = InetAddress.getByName("localhost");
     int AJAN_CNC_UDP_PORT;
    PrintWriter out=null;
  BufferedReader in=null;
ActionListener  ali;
public  String FILE_TO_SEND,gec;
 char [] AjanPortBytes  = new char[500];
 byte [] AjanPortByte  ;//= new char[500];

static OutToAjan AjanPortOut=new OutToAjan();
static OutToAjan SoftAjanPort=new OutToAjan();
static OutToAjan WirelessAjanPort=new OutToAjan();
Graphics2D lay1;
long posxb,posyb,postlb,postrb;
static int centerX,centerY;//,Scale=2;
double ShiftX=0,ShiftY=0;
static int CX,CY;
int MX,MY,mxb=0,myb=0;

static double Scale=.02;
double scala=2;
int MouseShiftStX=0,MouseShiftStY=0,ZWindowStX=0,ZWindowStY=0;
Color PltClr;
private BufferedImage Pause;
//java.util.List<Contour>[] vertex = new java.util.List[2000];

static java.util.ArrayList<VoltagePressure> PVData = new java.util.ArrayList<>();
        java.util.ArrayList<Contour> vertex = new java.util.ArrayList<>();
java.util.ArrayList<CncObjectHsp> hsp = new java.util.ArrayList<>();
static java.util.ArrayList<DxfEssi> dxfVect = new java.util.ArrayList<>();
static java.util.ArrayList<DxfEssi> dxfVectWithOff = new java.util.ArrayList<>();
//{'1','2','1','2'};
static InfromCnc AjanPortIn = null;
InfromCnc AjanPortInBef;
InfromCnc AjanPortInOld;

//****************** INI FILE ISLEMLERI ***********************//
inifile iniFile=new inifile();
String iniFileName="ajan.ini";
static public boolean projeAcik=false;    
static public boolean projeEdit=false;
       public void CheckOpenInit(){
    
        File f = new File(iniFileName);
            if(f.exists() && !f.isDirectory()) { 
                    Deserializer deserializer = new Deserializer();
                    
                            if(deserializer.deserialzeIniFile(f)!=null){
                                iniFile=deserializer.deserialzeIniFile(f);
                                if(!iniFile.projectFile.getName().equals("proj"))projeAcik=ProjeAc(iniFile.projectFile);
                            }
                            else {iniFile.lastFilePath="user.dir";iniFile.projectFile=new File("proj");projeAcik=false; }
                            
                            
                    if(iniFile==null){iniFile.lastFilePath="user.dir";iniFile.projectFile=new File("proj");}
            }else { iniFile.lastFilePath="user.dir";iniFile.lastAyarFile="empty";
            iniFile.projectFile=new File("proj");projeAcik=false; 
            //iniFile.currentFont=new Font("Verdana", Font.BOLD, 12);
            }
     
    }
     
       
public boolean projeKayitSor(){
    
    
    if(projeAcik){
 int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
    int dialogResult = JOptionPane.showConfirmDialog (null, "Ã–nceki Proje Kaydedilsin mi?","Warning",dialogButton);
if(dialogResult == JOptionPane.YES_OPTION){
    if(iniFile.projectFile.getName().equals("proj"))ProjeYaz(true);else ProjeYaz(false);
    gecerliproje=new legalProject();dxfVect.clear();dxfVectWithOff.clear();
    return true;
    }
    
else if(dialogResult == JOptionPane.NO_OPTION){
    gecerliproje=new legalProject();dxfVect.clear();dxfVectWithOff.clear();
return true;
    }
    }
    else{
    
    if(iniFile.projectFile.getName().equals("proj"))ProjeYaz(true);else ProjeYaz(false);
    gecerliproje=new legalProject();dxfVect.clear();dxfVectWithOff.clear();
    return true;
    
    }

return false;
}



 public void ProjeYaz(boolean pencereAc){      

     if(pencereAc==true){
    JFileChooser chooser = new JFileChooser();
    chooser.setCurrentDirectory(new File("/home/me/Documents"));
    int retrival = chooser.showSaveDialog(null);
    if (retrival == JFileChooser.APPROVE_OPTION) {
        
        if(chooser.getSelectedFile().getAbsolutePath().toLowerCase().endsWith(".ajn"))
            iniFile.projectFile=chooser.getSelectedFile();
        else
        iniFile.projectFile=new File(chooser.getSelectedFile()+".ajn");
        
    }               
    }
     
     if(iniFile.projectFile!=null){
            try {
                gecerliproje.projectStartNo=CutStartObjNo;
                gecerliproje.projectEndNo=CutEndObjNo;
            //FileWriter fw = new FileWriter(chooser.getSelectedFile()+".txt");
            //gecerliproje.save(chooser.getSelectedFile());
            Serializer serializer = new Serializer();
            serializer.serializeGecerliProje(gecerliproje,iniFile.projectFile);
            //iniFile.projectFile=ProjeFile;
            iniYaz();
      //      fw.write(sb.toString());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
         
     }
     
 
 }
public void iniYaz()
{
                    File f=new File(iniFileName);
                        Serializer serializer = new Serializer();
                        try {
                        serializer.serializeIniFile(iniFile,f);
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
                        }
this.setTitle(iniFile.projectFile.getAbsolutePath());
      prjNameLabel.setText("Project Name : "+iniFile.projectFile.getName());
}




       public boolean ProjeAc(File proje_dosya){
            boolean durum=false;
        if(proje_dosya==null){
              final JFileChooser fc = new JFileChooser();
              fc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
              int returnVal = fc.showOpenDialog(ajanframe.this);
              if (returnVal == JFileChooser.APPROVE_OPTION) {proje_dosya = fc.getSelectedFile();
              }
        
            }
                
        
      if(proje_dosya!=null){
          
            Deserializer deserializer = new Deserializer();
            gecerliproje=deserializer.deserialzeGecerliProje(proje_dosya);
            if(gecerliproje!=null)
            {
                    gecerliproje.setdosyalistesi(ProjectFilesList);
                    gecerliproje.listele();
                    vektortazele();
                    iniFile.projectFile=proje_dosya;iniYaz();
              durum=true;      
            }else
            {
                File f = new File(iniFileName);f.delete();
          
            CheckOpenInit();
            durum=false;      
            }
                 
      }
        
        return durum;
    }

//****************** INI FILE ISLEMLERI ***********************//


public void vektortazele(){
    Graph.MJoint.removeAll(Graph.MJoint);
    dxfVect = new java.util.ArrayList<>();
            dxfVectWithOff = new java.util.ArrayList<>();
                    for(int i=0;i<gecerliproje.getkesimDosyasiSayisi();i++)
                    {
                            if(i==0)//dxfVect=gecerliproje.getDxfVectorler(i);
                            dxfVect.addAll(gecerliproje.getDxfVectorlerWithStart(i));
                        else
                               dxfVect.addAll(gecerliproje.getDxfVectorlerWithStart(i));
                            
                            Graph.MJoint.addAll(gecerliproje.getMicroJoints(i));
                    }
                    dxfVectWithOff=dxfVect;
                        Graph.MJoint.removeAll(Graph.MJoint);
                CutStartObjNo=gecerliproje.projectStartNo;
              CutEndObjNo=gecerliproje.projectEndNo;
                    
                    
                    canvas.repaint();
    }



          private class MyDispatcher implements KeyEventDispatcher {
        @Override
        public boolean dispatchKeyEvent(java.awt.event.KeyEvent e) {
            ActionEvent ActionEvent1=null;
             if(e.getKeyChar()=='m'){
                 //if(isActive())                 jMenuItem8ActionPerformed(ActionEvent1);
                 Handy.TorchGoUp=true;
             }
            
            if (e.getID() == java.awt.event.KeyEvent.KEY_PRESSED) {
                System.out.println("tester");
            } else if (e.getID() == java.awt.event.KeyEvent.KEY_RELEASED) {
                System.out.println("2test2");
            } else if (e.getID() == java.awt.event.KeyEvent.KEY_TYPED) {
                System.out.println("3test3");
            }
            return false;
        }

        /*@Override
        public boolean dispatchKeyEvent(KeyEvent ke) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }*/
    }









javax.swing.Timer t = new javax.swing.Timer(000, ali=new ActionListener() {
          public void actionPerformed(ActionEvent e) {
              try {
                  //p.repaint();
                 Recv() ;
              } catch (IOException ex) {
                  Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
              }
//Checksock();
             // JOptionPane.showMessageDialog(null,);
              sayac++;
          }
       });
      
 
//@Override
  /*  
  public void paint(Graphics g) {
        //super.paint(g);
        RefreshPanel();
    }*/
        
void InitSerial(){
    CommPortIdentifier portId;
   // Win32Driver w32Driver = new Win32Driver();
   // w32Driver.initialize();
    portList = CommPortIdentifier.getPortIdentifiers();
    System.out.println("portList... " + portList);
    while (portList.hasMoreElements()) {
        portId = (CommPortIdentifier) portList.nextElement();
        if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
            System.out.println("port identified is Serial.. "
                    + portId.getPortType());
            if (portId.getName().equals("COM4")||portId.getName().equals("/dev/ttyS0")) {
                System.out.println("port identified is COM4.. "
                        + portId.getName());
                
                Serial reader = new Serial(portId);
                break;
            } else {
                System.out.println("unable to open port");
            }
        }
    }
}
/*
void InitSerial(){
    CommPortIdentifier portId;
    Win32Driver w32Driver = new Win32Driver();
    w32Driver.initialize();
    portList = CommPortIdentifier.getPortIdentifiers();
    System.out.println("portList... " + portList);
    while (portList.hasMoreElements()) {
        portId = (CommPortIdentifier) portList.nextElement();
        if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
            System.out.println("port identified is Serial.. "
                    + portId.getPortType());
            if (portId.getName().equals("COM4")) {
                System.out.println("port identified is COM4.. "
                        + portId.getName());
                
                Serial reader = new Serial(portId);
                break;
            } else {
                System.out.println("unable to open port");
            }
        }
    }
}*/
public Hatalar HataPenceresi=new Hatalar();
public static boolean hatayiac=false;
int hataalarmsay=0;int hataalarmsure=10;
    public ajanframe() throws UnknownHostException {
       // Job.PlateToXAxisAngle=(float)Math.PI/4;
  InitSerial();
        StartDatabase();   
    IPAddress = InetAddress.getByName("localhost");
        initComponents();    
        
        //HataPenceresi=new Hatalar();
        //HataPenceresi.setVisible(false);
        //HataPenceresi.show();
        //HataPenceresi.setVisible(false);
        lay1=(Graphics2D) canvas.getGraphics(); 
        
         centerY=canvas.getHeight()/2;
         centerX=canvas.getWidth()/2;
         CX=(int) (centerX+ShiftX);
         CY=(int) (centerY+ShiftY);
         PltClr=canvas.getForeground();
         //lay1.translate(centerX/2., centerY/2.);
vertex.add(new Contour(0,0)); 
BackColor=HataPenceresi.CncFaults.getBackground();
TxtColor=HataPenceresi.CncFaults.getForeground();
PierceTimeIndicator.setText(String.valueOf(AjanCutParam.Plasma.PierceDelayTime));
CutHeightIndicator.setText(String.valueOf(AjanCutParam.Plasma.TorchToWorkDistance));
//CncFaults.setText("");

//Hplazma Hp=new Hplazma("findAll");

/*Hp.setMaterial("demir");
Hp.setCurrent("30 Amp");
Hp.setGases("02/O2");*/
//Hp.findByMaterial(demir);
//Hplazma.findByMaterial;
//Database();
//jTextArea1.setText("ajan elektronik");
//AjanPortIn=new InfromCnc(AjanPortByte, 0, 64); 
try {
                Pause = ImageIO.read(new File("images\\pause.png"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }

//centerY=0;
         //centerX=0;
         lay1.drawImage(Pause, -centerX/2, -centerY/2, this);
         
    AjanChart=new AjanCutCharts(Stmt);
  MachineChart=new MachineParameterCharts(Stmt); 
           
    //.setText(AjanMachine.PlMaterial+AjanMachine.PlCurrent+"A"+AjanMachine.PlThickness+"mm"+AjanMachine.PlGases);// "Mild Steel 260Amp 4mm O2/AIR);
    }

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
  
    public void StartDatabase(){
  try{
      Class.forName(JDBC_DRIVER);
      Conn = DriverManager.getConnection(DB_URL,USER,PASS);
      Stmt = Conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                                      ResultSet.CONCUR_UPDATABLE);
  }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }


}
public void StopDatabase(){
 DataGiris=0;
    try{
        Stmt.close();
      Conn.close();
      //rs.close();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(Stmt!=null)
            Stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(Conn!=null)
            Conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try

}
static ArcLen aci_uz(long indx,double xmer,double ymer,double x1,double y1,double p1,double x2,double y2,double p2)
{ ArcLen Object=new ArcLen();double ara;
if(indx==1||indx==5){
if(Math.abs(x2-x1)>0.001){
Object.StartAngle=Math.atan2(y2-y1,x2-x1);if(Object.StartAngle<0)Object.StartAngle=Object.StartAngle+2*Math.PI;}
else {if(y2>y1)Object.StartAngle=Math.PI/2;else Object.StartAngle=3*Math.PI/2;}
           }
if(indx==2||indx==3||indx==4)

{if(Math.abs(p1-xmer)>0.001){Object.MidAngle=Math.atan2(p2-ymer,p1-xmer);if(Object.MidAngle<0)Object.MidAngle=Object.MidAngle+2*Math.PI;}
else {if(p1>ymer)Object.MidAngle=Math.PI/2;else Object.MidAngle=3*Math.PI/2;}
    if(Math.abs(x2-xmer)>0.001){Object.EndAngle=Math.atan2(y2-ymer,x2-xmer);if(Object.EndAngle<0)Object.EndAngle=Object.EndAngle+2*Math.PI;}
else {if(y2>ymer)Object.EndAngle=Math.PI/2;else Object.EndAngle=3*Math.PI/2;}
if(Math.abs(x1-xmer)>0.001){Object.StartAngle=Math.atan2(y1-ymer,x1-xmer);if(Object.StartAngle<0)Object.StartAngle=Object.StartAngle+2*Math.PI;}
else {if(y1>ymer)Object.StartAngle=Math.PI/2;else Object.StartAngle=3*Math.PI/2;}
}
if(indx==1)Object.Lenght=Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
if(indx==2){if(Object.StartAngle>Object.EndAngle)Object.Lenght=(Object.StartAngle-Object.EndAngle);else Object.Lenght=(2*Math.PI-Object.EndAngle+Object.StartAngle); }
if(indx==3){if(Object.StartAngle>Object.EndAngle)Object.Lenght=(2*Math.PI-Object.StartAngle+Object.EndAngle);else {if(Object.EndAngle==0&&Object.StartAngle==0)Object.Lenght=2*Math.PI;else Object.Lenght=(Object.EndAngle-Object.StartAngle);} }
if(indx==4){Object.Lenght=2*Math.PI;}
if(indx==2){ara=Object.StartAngle;Object.StartAngle=Object.EndAngle;Object.EndAngle=ara;}
if(Object.StartAngle>=Object.MidAngle)Object.MidAngle+=2*Math.PI;    
if(Object.StartAngle>=Object.EndAngle)Object.EndAngle+=2*Math.PI;
return Object;
}
int aci_to_yol(double aci){
double hiz=80,yol=1;
     if(aci<Math.PI/2.*.5   /9. ) hiz=5000.;
else if(aci<Math.PI/2.*.6  /9. )hiz=5000.;
else if(aci<Math.PI/2.*.71  /9. )hiz=1300.;
else if(aci<Math.PI/2.*.85  /9. )hiz=1100.;//1000
else if(aci<Math.PI/2.*1.7  /9. )hiz=700.;
else if(aci<Math.PI/2.*2.5  /9. )hiz=300.;
else if(aci<Math.PI/2.*18   /9. )hiz=100. ;
yol= (hiz/3.)*(hiz/3.)*1.25/AjanMachine.accel;
if(yol<1)yol=1;
   return (int)yol;

                           }
double radius_to_aci(double radius,int real_hiz){//6//sep//2002//haluk kucuk arc lar da hsp de hiz dusurmek gerekiyor.
double aci=0;
int hiz=real_hiz;
     if(radius<200) {aci=Math.PI/2.;}
else if(radius<400) {aci=33.  *Math.PI/180.;hiz=1050;}
else if(radius<700) {aci=28.  *Math.PI/180.;hiz=1600;}
else if(radius<1100){aci=26.  *Math.PI/180.;hiz=2000;}
else if(radius<1500){aci=19.  *Math.PI/180.;hiz=3400;}
else if(radius<2500){aci=15.5 *Math.PI/180.;hiz=4000;}
else if(radius<3100){aci=15.2 *Math.PI/180.;hiz=4500;}
//else if(radius<3000){aci=15.1 *Math.PI/180.;hiz=5000.;}

if(hiz>real_hiz)hiz=real_hiz;
real_hiz=hiz;
//if(deger>1)*real_hiz=*real_hiz*100./deger;
if(real_hiz>6000.)real_hiz=6000;
return aci;
}
double xy_angle(double x1,double y1,double x2,double y2)
{ double angle;
if(Math.abs(x2-x1)>0.000001){
angle=atan2(y2-y1,x2-x1);
if(angle<0)angle=angle+2*Math.PI;}
else {if(y2>y1)angle=Math.PI/2;else angle=3*Math.PI/2;}
return angle;
}
double ara_aci(CncObjectHsp first,CncObjectHsp  second){
double aci=0,end_angle,start_angle,x1,y1,z1,x2,y2,z2,mag_first,mag_second;

if(!(first.Hm.oge.indx==1&&second.Hm.oge.indx==1)){
if(first.Hm.oge.indx==1)end_angle=xy_angle(first.Hm.oge.xn1,first.Hm.oge.yn1,first.Hm.oge.xn2,first.Hm.oge.yn2);
else{
end_angle=xy_angle(first.Hm.oge.xc,first.Hm.oge.yc,first.Hm.oge.xn2,first.Hm.oge.yn2);
if(first.Hm.oge.indx==2)end_angle-=Math.PI/2.;else if(first.Hm.oge.indx==3)end_angle+=Math.PI/2.;
if(end_angle<0)end_angle+=2*Math.PI;if(end_angle>2*Math.PI)end_angle-=2*Math.PI;
    }
if(second.Hm.oge.indx==1)start_angle=xy_angle(second.Hm.oge.xn1,second.Hm.oge.yn1,second.Hm.oge.xn2,second.Hm.oge.yn2);
else{
start_angle=xy_angle(second.Hm.oge.xc,second.Hm.oge.yc,second.Hm.oge.xn1,second.Hm.oge.yn1);
if(second.Hm.oge.indx==2)start_angle-=Math.PI/2.;else if(second.Hm.oge.indx==3)start_angle+=Math.PI/2.;
if(start_angle<0)start_angle+=2*Math.PI;if(start_angle>2*Math.PI)start_angle-=2*Math.PI;
    }
aci=Math.abs(start_angle-end_angle);
//////////////////////
if((first.Hm.oge.indx!=1||second.Hm.oge.indx!=1)){
if(first.Hm.oge.indx==1){
x1=(first.Hm.oge.xn2-first.Hm.oge.xn1);
y1=(first.Hm.oge.yn2-first.Hm.oge.yn1);
if(x1==0&&y1==0)aci=Math.PI/2.;
		}
else if(second.Hm.oge.indx==1){
x2=(second.Hm.oge.xn2-second.Hm.oge.xn1);
y2=(second.Hm.oge.yn2-second.Hm.oge.yn1);
if(x2==0&&y2==0)aci=Math.PI/2.;
		      }

			      }
////////////////////
}
else if(first.Hm.oge.indx==1&&second.Hm.oge.indx==1){
x1=(first.Hm.oge.xn2-first.Hm.oge.xn1);
y1=(first.Hm.oge.yn2-first.Hm.oge.yn1);
z1=0;
//(first.zend-first.zstart);
x2=(second.Hm.oge.xn2-second.Hm.oge.xn1);
y2=(second.Hm.oge.yn2-second.Hm.oge.yn1);
z2=0;
//(second.zend-second.zstart);
mag_first=sqrt(x1*x1+y1*y1+z1*z1);
mag_second=sqrt(x2*x2+y2*y2+z2*z2);
if(x1==x2&&y1==y2&&z1==z2)aci=0.;
else if(x1==-x2&&y1==-y2&&z1==-z2)aci=Math.PI;
else if((mag_second*mag_first)>=0.00001){
if(-1<=(aci=(x1*x2+y1*y2+z1*z2)/(mag_first*mag_second))&&aci<=1)aci=acos(aci);
else if(aci>1.)aci=0.;
else aci=Math.PI;
}
}
if(aci>Math.PI)aci=2*Math.PI-aci;
return aci;

}
DxfEssi assignto(DxfEssi vect){
DxfEssi temp = new DxfEssi();
temp.oge.EndAngle=vect.oge.EndAngle;
temp.oge.StartAngle=vect.oge.StartAngle;
temp.oge.atrib=vect.oge.atrib;
temp.oge.indx=vect.oge.indx;
temp.oge.radius=vect.oge.radius;
temp.oge.xc=vect.oge.xc;
temp.oge.xn1=vect.oge.xn1;
temp.oge.yc=vect.oge.yc;
temp.oge.xn2=vect.oge.xn2;
temp.oge.yn1=vect.oge.yn1;
temp.oge.yn2=vect.oge.yn2;
temp.oge.zc=vect.oge.zc;
temp.oge.zn1=vect.oge.zn1;
temp.oge.zn2=vect.oge.zn2;
temp.BottomSideBevelAngle=vect.BottomSideBevelAngle;
temp.Flags.AngleTakenFlg=vect.Flags.AngleTakenFlg;
temp.Flags.BeLastObject=vect.Flags.BeLastObject;
temp.Flags.BevelCornerF=vect.Flags.BevelCornerF;
temp.Flags.BevelCornerThcCancel=vect.Flags.BevelCornerThcCancel;
temp.Flags.BottomSideBevelCutisLegal=vect.Flags.BottomSideBevelCutisLegal;
temp.Flags.CutType=vect.Flags.CutType;
temp.Flags.FeedFlag=vect.Flags.FeedFlag;
temp.Flags.G40=vect.Flags.G40;
temp.Flags.G41=vect.Flags.G41;
temp.Flags.G42=vect.Flags.G42;
temp.Flags.IlaveFlag=vect.Flags.IlaveFlag;
temp.Flags.KerfFlag=vect.Flags.KerfFlag;
temp.Flags.LeadInFlag=vect.Flags.LeadInFlag;
temp.Flags.LeadOutFlag=vect.Flags.LeadOutFlag;
temp.Flags.MarkingCut=vect.Flags.MarkingCut;
temp.Flags.MarkingEnable=vect.Flags.MarkingEnable;
temp.Flags.MiddleSideBevelCutisLegal=vect.Flags.MiddleSideBevelCutisLegal;
temp.Flags.PiercingWith90DegreeCancel=vect.Flags.PiercingWith90DegreeCancel;
temp.Flags.PlasmaCut=vect.Flags.PlasmaCut;
temp.Flags.PlasmaEnable=vect.Flags.PlasmaEnable;
temp.Flags.RapidOn=vect.Flags.RapidOn;
temp.Flags.SkipFlag=vect.Flags.SkipFlag;
temp.Flags.SmallHole=vect.Flags.SmallHole;
temp.Flags.TopSideBevelCutisLegal=vect.Flags.TopSideBevelCutisLegal;
temp.Flags.A400Flag=vect.Flags.A400Flag;
temp.Flags.sabit_hiz_flag=vect.Flags.sabit_hiz_flag;
temp.Flags.MicroJointEnable=vect.Flags.MicroJointEnable;

temp.BottomSideBevelHeight=vect.BottomSideBevelHeight;
temp.EndAngle=vect.EndAngle;
temp.FeedRate=vect.FeedRate;
temp.KerfWidth=vect.KerfWidth;
temp.MiddleSideBevelHeight=vect.MiddleSideBevelHeight;
temp.StartAngle=vect.StartAngle;
temp.TopSideBevelAngle=vect.TopSideBevelAngle;
temp.TopSideBevelHeight=vect.TopSideBevelHeight;
temp.MicroIndex=vect.MicroIndex;
return temp;
}
void VectToCnc(){
   
    double xb= 0;
   double yb=0;
   double zb=0;
  // ReadEssi essi=null;
    if(AjanPortIn!=null){
   xb= AjanPortIn.PosX;
   yb=AjanPortIn.PosY;
   zb=0;}
   ArcLen Object;
   CncObjectHsp Orgtemp,temp,Rtemp;
   hsp = new java.util.ArrayList<>();
    for(int i=ajanframe.CutStartObjNo;i<ajanframe.CutEndObjNo;i++){
        temp=new CncObjectHsp();
        Orgtemp=new CncObjectHsp();
        Object=new ArcLen();
        temp.Cut=1;
        //temp.Hm=dxfVectWithOff.get(i);
        temp.Hm=assignto(dxfVectWithOff.get(i));
        temp.MicroJointIndex=dxfVectWithOff.get(i).MicroIndex;
        temp.Hm.oge.RotateObject(Job.PlateToXAxisAngle);
        Orgtemp.Hm=assignto(temp.Hm);
        
        if(temp.Hm.Flags.SkipFlag)continue;
                  if(AjanMachine.MachineType==0){
                      if(temp.Hm.Flags.MarkingEnable){
              temp.Hm.FeedRate=(int)( AjanCutParam.Plasma.MarkCuttingSpeed/2.5);}
                      else temp.Hm.FeedRate=(int)(AjanCutParam.Plasma.CuttingSpeed/2.5);    
              temp.Hm.KerfWidth=AjanCutParam.Plasma.KerfWidth;
          }else {
              temp.Hm.FeedRate=(int)(AjanCutParam.Oxy.CuttingSpeed/2.5);    
              temp.Hm.KerfWidth=AjanCutParam.Oxy.KerfWidth;
                }
               Object=aci_uz(temp.Hm.oge.indx,temp.Hm.oge.xc,temp.Hm.oge.yc,temp.Hm.oge.xn1,temp.Hm.oge.yn1,temp.Hm.oge.zn1,temp.Hm.oge.xn2,temp.Hm.oge.yn2,temp.Hm.oge.zn2);
    temp.Hm.oge.StartAngle=Object.StartAngle;temp.Hm.oge.EndAngle=Object.EndAngle;
    temp.temp=(int)Object.Lenght;
    if(temp.Hm.oge.indx>1){
    /*if(temp.Hm.oge.indx==2){temp.Hm.oge.StartAngle=Object.EndAngle;temp.Hm.oge.EndAngle=Object.StartAngle;}
    if(temp.Hm.oge.StartAngle>=temp.Hm.oge.EndAngle)temp.Hm.oge.EndAngle+=2*Math.PI;*/
    temp.temp=(int)Math.abs(Object.Lenght*temp.Hm.oge.radius);
    
    }
              
    if(Math.abs(Orgtemp.Hm.oge.xn1-xb)>0.00001||(Math.abs(Orgtemp.Hm.oge.yn1-yb))>0.00001||(Math.abs(Orgtemp.Hm.oge.zn1-zb))>0.00001){   
        Rtemp=new CncObjectHsp();
        Rtemp.Cut=0;
        Rtemp.Hm.oge.indx=1;
        Rtemp.Hm.oge.xn1=xb;
        Rtemp.Hm.oge.yn1=yb;
        Rtemp.Hm.oge.zn1=zb;
        Rtemp.Hm.oge.xn2=temp.Hm.oge.xn1;
        Rtemp.Hm.oge.yn2=temp.Hm.oge.yn1;
        Rtemp.Hm.oge.zn2=temp.Hm.oge.zn1;
        Rtemp.Hm.FeedRate=AjanMachine.RapidTraverse;
        Rtemp.Hm.KerfWidth=temp.Hm.KerfWidth;
        Object=aci_uz(Rtemp.Hm.oge.indx,Rtemp.Hm.oge.xc,Rtemp.Hm.oge.yc,Rtemp.Hm.oge.xn1,Rtemp.Hm.oge.yn1,Rtemp.Hm.oge.zn1,Rtemp.Hm.oge.xn2,Rtemp.Hm.oge.yn2,Rtemp.Hm.oge.zn2);
    Rtemp.temp=(int)Object.Lenght; 
    hsp.add(Rtemp);    
    }
    if(temp.Hm.oge.indx==4){
  //  Rtemp=te 
  Rtemp=new CncObjectHsp();
             Rtemp.Hm=assignto(temp.Hm);
             Rtemp.Cut=1;   
             Rtemp.Hm.FeedRate=temp.Hm.FeedRate;                      
             Rtemp.Hm.KerfWidth=temp.Hm.KerfWidth;
             Rtemp.temp=(int) (temp.temp/2);
             Rtemp.Hm.oge.indx=3;
             Rtemp.Hm.oge.StartAngle=0;
             Rtemp.Hm.oge.EndAngle=Math.PI;
             Rtemp.Hm.oge.xn1=Rtemp.Hm.oge.xn2;
             Rtemp.Hm.oge.yn1=Rtemp.Hm.oge.yn2;
             Rtemp.Hm.oge.xn2=Rtemp.Hm.oge.xc-Math.abs(Rtemp.Hm.oge.radius);
             //Rtemp.Hm.oge.yn1=Rtemp.Hm.oge.yn2;
             temp.Hm.oge.indx=3;
             temp.Hm.oge.yn1=Rtemp.Hm.oge.yn2;
             temp.Hm.oge.xn1=Rtemp.Hm.oge.xn2;
             temp.temp=(int) (temp.temp/2);
             temp.Hm.oge.StartAngle=Math.PI;
             temp.Hm.oge.EndAngle=2*Math.PI;
   hsp.add(Rtemp); 
    }
        xb=temp.Hm.oge.xn2;
        yb=temp.Hm.oge.yn2;
        zb=temp.Hm.oge.zn2;
        hsp.add(temp);
    }}
CncObjectHsp kontur_isle(CncObjectHsp hsp1,CncObjectHsp hsp){
//if(hsp[1].Hm.oge.indx>1&&(hsp[1].temp<1||hsp[1].radius<1||hsp[1].i==0&&hsp[1].j==0)) //noktalari marking yapmyordu
  //if(hsp1.Hm.oge.indx>1&&(hsp1.temp<1||hsp1.radius<1||hsp1.i==0&&hsp1.j==0)) return true;

     //if(tane>0){
     hsp._angle=ara_aci(hsp,hsp1);
     if(hsp._angle<6*Math.PI/2./90.){
		   if(hsp1.Hm.oge.indx>1&&((Math.abs(hsp1.Hm.EndAngle-hsp1.Hm.StartAngle)>3*Math.PI/18.)&&hsp1.Hm.oge.radius<=3500.))
       {
           double AraRad=hsp1.Hm.oge.radius;//12//may//2014//rev8// 120 dereceden buyuk radyuslerde tam donmede alev atlama yapiyordu..
         if(((Math.abs(hsp1.Hm.EndAngle-hsp1.Hm.StartAngle)>12*Math.PI/18.))&&hsp1.Hm.oge.radius<100.)AraRad=60;//12//may//2014//rev8//10//sep//2014//<200 idi// 120 dereceden buyuk radyuslerde tam donmede alev atlama yapiyordu..
     else if(((Math.abs(hsp1.Hm.EndAngle-hsp1.Hm.StartAngle)>12*Math.PI/18.))&&hsp1.Hm.oge.radius<300.)AraRad=210;//23//june//2014//rev9// 120 dereceden buyuk radyusler fakat 2mm den buyuk radiuslerde  gereksiz yavasliyordu..

     hsp._angle=radius_to_aci(AraRad,hsp1.Hm.FeedRate);
     hsp1.Hm.Flags.sabit_hiz_flag=true;
       }
        else hsp._angle=0.;
                                    }
     else if(hsp._angle>1.9*Math.PI/2.)hsp._angle=Math.PI;
  //   if((hsp1.plazma_durum&5)!=0&&hsp1.plazma_durum!=hsp.plazma_durum)hsp._angle=Math.PI/2.;
            if((hsp1.Hm.Flags.MarkingEnable!=hsp.Hm.Flags.MarkingEnable)||(hsp1.Hm.Flags.PlasmaEnable!=hsp.Hm.Flags.PlasmaEnable)||(hsp1.Cut!=hsp.Cut))hsp._angle=Math.PI/2.;
     // }//
return hsp;
//hsp1_write(tane,)
}        
byte[] ConvertToCnc1(CncObjectHsp hsp ,int ObjectNumber) throws IOException{
CncObjectHspConverted temp=new CncObjectHspConverted();
//byte[] bytehsp=new byte[200];//
ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
temp.indx=reverse(hsp.Hm.oge.indx);
outputStream.write(ToByteArray(temp.indx));

temp.atrib=reverse(ObjectNumber);
outputStream.write(ToByteArray(temp.atrib));

temp.xn1=reverse(hsp.Hm.oge.xn1);
outputStream.write(ToByteArray(temp.xn1));
byte c[] = outputStream.toByteArray( );

return c;
}
/*
byte[] MicroJToCnc(int i,int ListIndex) throws IOException{
byte ch;
int inttemp=0;
float floattemp=0;
ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
ch=77;outputStream.write(ch);
ch=68;outputStream.write(ch);
inttemp=reverse(ListIndex);outputStream.write(ToByteArray(inttemp));
for(int j=i;j<i+100;j++){

    if(j==Graph.MJoint.size())break;
inttemp=reverse(Graph.MJoint.get(j).index);outputStream.write(ToByteArray(inttemp));
floattemp=reverse(Graph.MJoint.get(j).LengthToStart);outputStream.write(ToByteArray(floattemp));
}
return outputStream.toByteArray( );
}*/
byte[] PrmsToCnc(int ObjectNumber) throws IOException{
//CncObjectHspConverted temp=new CncObjectHspConverted();
byte ch;
int inttemp=0;
float floattemp=0;
short shorttemp=0;
ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
ch=83;outputStream.write(ch);
ch=68;outputStream.write(ch);
CncPrmInit.CutObjectNumber=ObjectNumber;
inttemp=reverse(CncPrmInit.CutObjectNumber);outputStream.write(ToByteArray(inttemp));
floattemp=reverse(CncPrmInit.Thickness);outputStream.write(ToByteArray(floattemp));
inttemp=reverse(CncPrmInit.CutCurrent);outputStream.write(ToByteArray(inttemp));//CncPrmInit.CutSpeed
inttemp=reverse(CncPrmInit.ArcVoltage);outputStream.write(ToByteArray(inttemp));
shorttemp=reverse(CncPrmInit.CutSpeed);outputStream.write(ToByteArray(shorttemp));
floattemp=reverse(CncPrmInit.PrePlasmaPressure);outputStream.write(ToByteArray(floattemp));//
floattemp=reverse(CncPrmInit.PreShieldPressure);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.CutShieldPressure);outputStream.write(ToByteArray(floattemp));//
floattemp=reverse(CncPrmInit.CutPlasmaPressure);outputStream.write(ToByteArray(floattemp));//
floattemp=reverse(CncPrmInit.PierceDelayTime);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchToWorkDistance);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.PierceHeightFactor);outputStream.write(ToByteArray(floattemp));
inttemp=reverse(CncPrmInit. MarkCutCurrent);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(CncPrmInit.MarkArcVoltage);outputStream.write(ToByteArray(inttemp));
floattemp=reverse(CncPrmInit.MarkPrePlasmaPressure);outputStream.write(ToByteArray(floattemp));//
floattemp=reverse(CncPrmInit.MarkPreShieldPressure);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.MarkCutShieldPressure);outputStream.write(ToByteArray(floattemp));//
floattemp=reverse(CncPrmInit.MarkCutPlasmaPressure);outputStream.write(ToByteArray(floattemp));//
floattemp=reverse(CncPrmInit.MarkPierceDelayTime);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.MarkTorchToWorkDistance);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.MarkPierceHeightFactor);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.MicroJointThickness);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.MicroJointDistance);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.FirstMicroJointDistance);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.OH);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.LH);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.OF);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.LF);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.OT);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.LP);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.OK);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.OS);outputStream.write(ToByteArray(floattemp));//siyirma kesme oksijeni
floattemp=reverse(CncPrmInit.OxyPiercingHeight);outputStream.write(ToByteArray(floattemp));//WH);outputStream.write(ToByteArray(temp));//siyirma yuksekligi//float
floattemp=reverse(CncPrmInit.OxyPiercingDistance);outputStream.write(ToByteArray(floattemp));//ON);outputStream.write(ToByteArray(temp));// siyirma mesafesi//;
floattemp=reverse(CncPrmInit.OxyRampTime);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.PlasmaArcYukseklikBasinci);outputStream.write(ToByteArray(floattemp));
inttemp=reverse(CncPrmInit.PlasmaArcYukseklikAkimi);outputStream.write(ToByteArray(inttemp));
floattemp=reverse(CncPrmInit.FindCornerPH);outputStream.write(ToByteArray(floattemp));
inttemp=reverse(CncPrmInit.FindCornerVoltage);outputStream.write(ToByteArray(inttemp));
floattemp=reverse(CncPrmInit.UpDownDistance);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.FindCornerOffX);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.FindCornerOffY);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.FindCornerScanLength);outputStream.write(ToByteArray(floattemp));
inttemp=reverse(CncPrmInit.g5x);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(CncPrmInit.g5y);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(CncPrmInit.g5z);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(CncPrmInit.g5a);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(CncPrmInit.g5c);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(CncPrmInit.g5d);outputStream.write(ToByteArray(inttemp));
floattemp=reverse(CncPrmInit.TorchTLToSwitchOffset);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchTRToSwitchOffset);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchTVToSwitchOffset);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchTWToSwitchOffset);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchTLToArcOffset);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchTRToArcOffset);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchTVToArcOffset);outputStream.write(ToByteArray(floattemp));
floattemp=reverse(CncPrmInit.TorchTWToArcOffset);outputStream.write(ToByteArray(floattemp));
outputStream.write(CncPrmInit.MacVar);
outputStream.write(CncPrmInit.CutVar);
inttemp=reverse(Job.kalan_temp);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(Job.ResumeIndex);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(Job.Resposx);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(Job.Resposy);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(Job.Resposa);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(Job.Resposc);outputStream.write(ToByteArray(inttemp));
inttemp=reverse(Job.Resposd);outputStream.write(ToByteArray(inttemp));
if(Graph.MJoint.size()>0)outputStream.write('M');
else outputStream.write(13);
outputStream.write(13);
byte c[] = outputStream.toByteArray( );

return c;
}
 byte[] ConvertToCnc(CncObjectHsp hsp ,int ObjectNumber) throws IOException{
CncObjectHspConverted temp=new CncObjectHspConverted();
//byte[] bytehsp=new byte[200];//
ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
temp.c1=65;
outputStream.write(temp.c1);
temp.c2=122;
outputStream.write(temp.c2);
//outputStream.write(ToByteArray(temp.indx));
temp.indx=reverse(hsp.Hm.oge.indx);
outputStream.write(ToByteArray(temp.indx));

temp.atrib=reverse(hsp.Hm.oge.atrib);
outputStream.write(ToByteArray(temp.atrib));

temp.radius=reverse(hsp.Hm.oge.radius);
outputStream.write(ToByteArray(temp.radius));

temp.xc=reverse(hsp.Hm.oge.xc);
outputStream.write(ToByteArray(temp.xc));

temp.yc=reverse(hsp.Hm.oge.yc);
outputStream.write(ToByteArray(temp.yc));

temp.zc=reverse(hsp.Hm.oge.zc);
outputStream.write(ToByteArray(temp.zc));

temp.xn1=reverse(hsp.Hm.oge.xn1);
outputStream.write(ToByteArray(temp.xn1));

temp.yn1=reverse(hsp.Hm.oge.yn1);
outputStream.write(ToByteArray(temp.yn1));

temp.zn1=reverse(hsp.Hm.oge.zn1);
outputStream.write(ToByteArray(temp.zn1));

temp.xn2=reverse(hsp.Hm.oge.xn2);
outputStream.write(ToByteArray(temp.xn2));

temp.yn2=reverse(hsp.Hm.oge.yn2);
outputStream.write(ToByteArray(temp.yn2));

temp.zn2=reverse(hsp.Hm.oge.zn2); //21/Apr/01 float idi.
outputStream.write(ToByteArray(temp.zn2));

temp.StartAngle=reverse(hsp.Hm.oge.StartAngle);
outputStream.write(ToByteArray(temp.StartAngle));

temp.EndAngle=reverse(hsp.Hm.oge.EndAngle);
outputStream.write(ToByteArray(temp.EndAngle));

temp.FeedRate=reverse(hsp.Hm.FeedRate);
outputStream.write(ToByteArray(temp.FeedRate));

temp.KerfWidth=reverse(hsp.Hm.KerfWidth);
outputStream.write(ToByteArray(temp.KerfWidth));

temp.CStartAngle=reverse(hsp.Hm.StartAngle);
outputStream.write(ToByteArray(temp.CStartAngle));

temp.CEndAngle=reverse(hsp.Hm.EndAngle);
outputStream.write(ToByteArray(temp.CEndAngle));

temp.TopSideBevelAngle=reverse(hsp.Hm.TopSideBevelAngle);
outputStream.write(ToByteArray(temp.TopSideBevelAngle));

temp.TopSideBevelHeight=reverse(hsp.Hm.TopSideBevelHeight);
outputStream.write(ToByteArray(temp.TopSideBevelHeight));

temp.MiddleSideBevelHeight=reverse(hsp.Hm.MiddleSideBevelHeight);
outputStream.write(ToByteArray(temp.MiddleSideBevelHeight));

temp.BottomSideBevelHeight=reverse(hsp.Hm.BottomSideBevelHeight);
outputStream.write(ToByteArray(temp.BottomSideBevelHeight));

temp.BottomSideBevelAngle=reverse(hsp.Hm.BottomSideBevelAngle);
outputStream.write(ToByteArray(temp.BottomSideBevelAngle));

temp.corner_max_v_yol=reverse(hsp.corner_max_v_yol);
outputStream.write(ToByteArray(temp.corner_max_v_yol));

temp.block_kalan_yol=reverse(hsp.block_kalan_yol);
outputStream.write(ToByteArray(temp.block_kalan_yol));

temp.normal_limited_v_yol=reverse(hsp.normal_limited_v_yol);
outputStream.write(ToByteArray(temp.normal_limited_v_yol));

temp.temp=reverse(hsp.temp);
outputStream.write(ToByteArray(temp.temp));

temp.ana_temp=reverse(hsp.ana_temp);
outputStream.write(ToByteArray(temp.ana_temp));

temp._angle=reverse(hsp._angle);
outputStream.write(ToByteArray(temp._angle));

temp.Cut=reverse(hsp.Cut);
outputStream.write(ToByteArray(temp.Cut));

temp.MicroJointIndex=reverse(hsp.MicroJointIndex);
outputStream.write(ToByteArray(temp.MicroJointIndex));
temp.ObjectNumber=ObjectNumber;
outputStream.write(ToByteArray(temp.ObjectNumber));
temp.EsFlgs=hsp.Hm.Flags.boolToByte();
outputStream.write(temp.EsFlgs);

temp.tmp[1]=13;
outputStream.write(temp.tmp);
byte c[] = outputStream.toByteArray( );

return c;
}/*
 byte[] ParamConvertToCnc(CncObjectHsp hsp ,int ObjectNumber) throws IOException{
CncObjectHspConverted temp=new CncObjectHspConverted();
//byte[] bytehsp=new byte[200];//
ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
temp.c1=65;
outputStream.write(temp.c1);
temp.c2=122;
outputStream.write(temp.c2);
//outputStream.write(ToByteArray(temp.indx));
temp.indx=reverse(hsp.Hm.oge.indx);
outputStream.write(ToByteArray(temp.indx));

temp.atrib=reverse(hsp.Hm.oge.atrib);
outputStream.write(ToByteArray(temp.atrib));

temp.radius=reverse(hsp.Hm.oge.radius);
outputStream.write(ToByteArray(temp.radius));

temp.xc=reverse(hsp.Hm.oge.xc);
outputStream.write(ToByteArray(temp.xc));

temp.yc=reverse(hsp.Hm.oge.yc);
outputStream.write(ToByteArray(temp.yc));

temp.zc=reverse(hsp.Hm.oge.zc);
outputStream.write(ToByteArray(temp.zc));

temp.xn1=reverse(hsp.Hm.oge.xn1);
outputStream.write(ToByteArray(temp.xn1));

temp.yn1=reverse(hsp.Hm.oge.yn1);
outputStream.write(ToByteArray(temp.yn1));

temp.zn1=reverse(hsp.Hm.oge.zn1);
outputStream.write(ToByteArray(temp.zn1));

temp.xn2=reverse(hsp.Hm.oge.xn2);
outputStream.write(ToByteArray(temp.xn2));

temp.yn2=reverse(hsp.Hm.oge.yn2);
outputStream.write(ToByteArray(temp.yn2));

temp.zn2=reverse(hsp.Hm.oge.zn2); //21/Apr/01 float idi.
outputStream.write(ToByteArray(temp.zn2));

temp.StartAngle=reverse(hsp.Hm.oge.StartAngle);
outputStream.write(ToByteArray(temp.StartAngle));

temp.EndAngle=reverse(hsp.Hm.oge.EndAngle);
outputStream.write(ToByteArray(temp.EndAngle));

temp.FeedRate=reverse(hsp.Hm.FeedRate);
outputStream.write(ToByteArray(temp.FeedRate));

temp.KerfWidth=reverse(hsp.Hm.KerfWidth);
outputStream.write(ToByteArray(temp.KerfWidth));

temp.CStartAngle=reverse(hsp.Hm.StartAngle);
outputStream.write(ToByteArray(temp.CStartAngle));

temp.CEndAngle=reverse(hsp.Hm.EndAngle);
outputStream.write(ToByteArray(temp.CEndAngle));

temp.TopSideBevelAngle=reverse(hsp.Hm.TopSideBevelAngle);
outputStream.write(ToByteArray(temp.TopSideBevelAngle));

temp.TopSideBevelHeight=reverse(hsp.Hm.TopSideBevelHeight);
outputStream.write(ToByteArray(temp.TopSideBevelHeight));

temp.MiddleSideBevelHeight=reverse(hsp.Hm.MiddleSideBevelHeight);
outputStream.write(ToByteArray(temp.MiddleSideBevelHeight));

temp.BottomSideBevelHeight=reverse(hsp.Hm.BottomSideBevelHeight);
outputStream.write(ToByteArray(temp.BottomSideBevelHeight));

temp.BottomSideBevelAngle=reverse(hsp.Hm.BottomSideBevelAngle);
outputStream.write(ToByteArray(temp.BottomSideBevelAngle));

temp.corner_max_v_yol=reverse(hsp.corner_max_v_yol);
outputStream.write(ToByteArray(temp.corner_max_v_yol));

temp.block_kalan_yol=reverse(hsp.block_kalan_yol);
outputStream.write(ToByteArray(temp.block_kalan_yol));

temp.normal_limited_v_yol=reverse(hsp.normal_limited_v_yol);
outputStream.write(ToByteArray(temp.normal_limited_v_yol));

temp.temp=reverse(hsp.temp);
outputStream.write(ToByteArray(temp.temp));

temp.ana_temp=reverse(hsp.ana_temp);
outputStream.write(ToByteArray(temp.ana_temp));

temp._angle=reverse(hsp._angle);
outputStream.write(ToByteArray(temp._angle));

temp.Cut=reverse(hsp.Cut);
outputStream.write(ToByteArray(temp.Cut));

temp.MicroJointIndex=reverse(hsp.MicroJointIndex);
outputStream.write(ToByteArray(temp.MicroJointIndex));
temp.ObjectNumber=ObjectNumber;
outputStream.write(ToByteArray(temp.ObjectNumber));
temp.EsFlgs=hsp.Hm.Flags.boolToByte();
outputStream.write(temp.EsFlgs);

temp.tmp[1]=13;
outputStream.write(temp.tmp);
byte c[] = outputStream.toByteArray( );

return c;
}*/
void ToCnc(){

CncObjectHsp gecici = new CncObjectHsp();
//double pi;
int i,k=0;//,eski_el_sayisi;
int gecici_velocity,old_velocity=0;
int j=0,m=0;
int toplam_kontur_uz=0;
double angle_for_arc,gecici_angle;
int eski_min_yol=0,eski_max_yol=0,yeni_max_yol=0,yeni_min_yol=0,ana_temp=0;
//struct highspeed gecici={0};
//char flag=0;//DozerMapper dz; 
//DEBUG.WorkingFunction.bit.CALCULATE=1;
//double eski_hiz=0;

//kontur_write(tane);
/*long tane=hsp.size();
if(tane==0)tane=1;
else tane=tane+1;

*/
VectToCnc();
k=1;
ana_temp=0;
int l=0;//13//feb//2006 haluk long idi..
int ResumeTemp=0;
for(i=0;i<hsp.size();i++){
    if((i+1)<hsp.size())gecici=hsp.get(i+1);
    else gecici=new CncObjectHsp();
    hsp.set(i,kontur_isle(gecici,hsp.get(i))); 
ana_temp+=hsp.get(i).temp;
}
                    
//tane=k;

//ana_temp=0;


for( l=0;l<hsp.size();l++){
//hsp=hard_read(l);
//ana_temp=0;
m=0;l=hsp.size();

if(ana_temp==0)break;
for(i=m;i<l;i++){
//hsp=hard_read(i);
if(hsp.get(i).Cut==0)AjanMachine.accel=AjanMachine.RapidAccel;//25//feb//2004 bostaki AjanMachine.accel 700 oldu..
else AjanMachine.accel=AjanMachine.RampAccel;
if(hsp.get(i)._angle!=0.){
hsp.get(i).corner_max_v_yol=aci_to_yol(hsp.get(i)._angle);
hsp.get(i).normal_limited_v_yol=(int)((hsp.get(i).Hm.FeedRate/3.)*(hsp.get(i).Hm.FeedRate/3.)*1.25/AjanMachine.accel);
if(hsp.get(i).corner_max_v_yol<hsp.get(i).normal_limited_v_yol)hsp.get(i).normal_limited_v_yol=hsp.get(i).corner_max_v_yol;
                         }

else if(i>0)if(old_velocity>hsp.get(i).Hm.FeedRate){
hsp.get(i).normal_limited_v_yol=(int)((hsp.get(i).Hm.FeedRate/3.)*(hsp.get(i).Hm.FeedRate/3.)*1.25/AjanMachine.accel);
hsp.get(i).corner_max_v_yol=(int)((1.25*hsp.get(i).Hm.FeedRate/3.)*(1.25*hsp.get(i).Hm.FeedRate/3.)*1.25/AjanMachine.accel);
if(hsp.get(i).corner_max_v_yol>1.25*6000.*6000./(9.*AjanMachine.accel))hsp.get(i).corner_max_v_yol=(int)(1.25*6000.*6000./(9.*AjanMachine.accel));
                                           }

//hard_write(i,hsp);
old_velocity=hsp.get(i).Hm.FeedRate;
toplam_kontur_uz=hsp.get(i).temp;

if(hsp.get(i)._angle==0){
for(j=i+1;j<l&&(hsp.get(j)._angle==0);j++)
{
    gecici=hsp.get(j);
angle_for_arc=ara_aci(hsp.get(i),gecici);
if((hsp.get(i).Cut)==0)AjanMachine.accel=700;
else AjanMachine.accel=AjanMachine.RampAccel;

if(angle_for_arc>0.&&(toplam_kontur_uz/angle_for_arc)<3500.){

if(angle_for_arc>=3.*Math.PI/2./9){
gecici_velocity=hsp.get(i).Hm.FeedRate;
gecici_angle=radius_to_aci(toplam_kontur_uz/angle_for_arc,gecici_velocity);
hsp.get(i).corner_max_v_yol=aci_to_yol(gecici_angle);
if(gecici_velocity>gecici.Hm.FeedRate)gecici_velocity=gecici.Hm.FeedRate;
hsp.get(i).normal_limited_v_yol=(int)((gecici_velocity/3.)*(gecici_velocity/3.)*1.25/AjanMachine.accel);
hsp.get(i)._angle=gecici_angle;

for(k=i+1;k<=j;k++){
//gecici=hsp.get(k);
old_velocity=hsp.get(k).Hm.FeedRate=gecici_velocity;
hsp.get(k).Hm.Flags.sabit_hiz_flag=true;
//hard_write(k,gecici);
                  }//for(k=i+1;k<=j;k++)
//hard_write(i,hsp);
i=j;
break;
                              } //if(angle_for_arc>=3.*Math.PI/2./9)


                                                         }//if(angle_for_arc>0.&&(toplam_kontur_uz/angle_for_arc)<3250.){
else break;
toplam_kontur_uz+=gecici.temp;
}//for(j=i+1;angle_for_arc=ara_aci(hsp,gecici=hard_read(j)),j<=tane&&gecici._angle==0;j++)

}//if(hsp._angle==0)

}//for(i=0;i<tane;i++){
eski_min_yol=0;
eski_max_yol=0;
toplam_kontur_uz=0;

for(i=l-1;i>=m;i--){
//if((inportb(ANI_PORT)&128)==0)pause_cont(0);
//if(salin)break;
//hsp=hard_read(i);
if(hsp.get(i).corner_max_v_yol>0){
if(hsp.get(i).corner_max_v_yol>hsp.get(i).normal_limited_v_yol){
if(hsp.get(i).normal_limited_v_yol*1.25*1.25>hsp.get(i).corner_max_v_yol)yeni_max_yol=hsp.get(i).corner_max_v_yol;
else yeni_max_yol=(int)(hsp.get(i).normal_limited_v_yol*1.25*1.25);
                                                               }
else  yeni_max_yol=hsp.get(i).corner_max_v_yol;
      yeni_min_yol=hsp.get(i).normal_limited_v_yol;

if(yeni_max_yol>eski_min_yol){
if((yeni_max_yol-eski_min_yol)<=toplam_kontur_uz){
toplam_kontur_uz=0;
eski_min_yol=yeni_min_yol;
eski_max_yol=yeni_max_yol;


                                                 }//if((yeni_max_yol-eski_min_yol)<toplam_kontur_uz)

                             }//if(yeni_max_yol>eski_min_yol)
else{
toplam_kontur_uz=0;
eski_min_yol=yeni_min_yol;
eski_max_yol=yeni_max_yol;
    }
                                 }//if(hsp.corner_max_v_yol>0){

hsp.get(i).normal_limited_v_yol=eski_min_yol;
hsp.get(i).corner_max_v_yol=eski_max_yol;
toplam_kontur_uz+=hsp.get(i).temp;
hsp.get(i).block_kalan_yol=toplam_kontur_uz;
hsp.get(i).ana_temp=ana_temp;
//hard_write(i,hsp);
/*
if(!dryflag){//6//nov//2015//rev26//kesme istatistikleri ilave
double xya_temp=sqrt(1.*(hsp.Hm.oge.xn2-hsp.Hm.oge.xn1)*(hsp.Hm.oge.xn2-hsp.Hm.oge.xn1)+1.*(hsp.Hm.oge.yn2-hsp.Hm.oge.yn1)*(hsp.Hm.oge.yn2-hsp.Hm.oge.yn1));
if((hsp.plazma_durum&1)==1)CutStat.TotalPierce++;
if((hsp.plazma_durum&2)==2&&(hsp.plazma_durum&16)!=16){
   CutStat.TotalCuttingContourLen+=xya_temp/10.;
   CutStat.CutFeedRate=(2.5*hsp.hiz);
  if((hsp.plazma_durum&1)==1) CutStat.TotalCuttingPierce++;
}
else if((hsp.plazma_durum&16)==16&&(hsp.plazma_durum&8)!=8){
 CutStat.TotalMarkingContourLen+=xya_temp/10.;
   CutStat.MarkFeedRate=hsp.hiz*2.5;

}

else{
   CutStat.TotalTravelingContourLen+=xya_temp/10.;
   CutStat.RapidTraverse=rapid_traverse*2.5;
    }
if(hsp.Flg.bit.SmallHole) CutStat.SmallHoleFeedRate=hsp.hiz*2.5;
   CutStat.TotalContourLen=CutStat.TotalCuttingContourLen+CutStat.TotalMarkingContourLen+CutStat.TotalTravelingContourLen;
}*/

                   }//for(i=l-1;i>=m;i--){


}//for(int l=0;l<tane;l++){
/*if(AjanPortOut.RESUME){
ResumeTemp=0;
 ArcLen ALength= new ArcLen();
for(i=0;i<=Job.ResumeIndex;i++){
        if(i==Job.ResumeIndex)ALength=hsp.get(i).Hm.oge.GetLen(Job.posx,Job.posy); 
    else ALength=hsp.get(i).Hm.oge.GetLen(0); 
ResumeTemp+=ALength.Lenght;
}

Job.kalan_temp=ana_temp-ResumeTemp;
}else Job.kalan_temp=ana_temp;
ResumeTemp=0;*/
//AjanPortOut.DataReady=true;
                           
}
void ToCnc1(){//BAK Ä°PTAL EDÄ°LECEK
//for (int i=0;i<hsp.size();i++);
//void hsp_cutting(long tane){
//struct parametre para={{0}};
//struct h_speed eski={{0}};
//<CncObjectHsp> hsp = new java.util.ArrayList<>();
//java.util.ArrayList<CncObjectHsp> hsp1 = new java.util.ArrayList<>();
//CncObjectHsp hsp1 = new CncObjectHsp();
CncObjectHsp gecici = new CncObjectHsp();
double pi;
int i,k=0;//,eski_el_sayisi;
int gecici_velocity,old_velocity=0;
int j,m=0;
long toplam_kontur_uz=0;
double angle_for_arc,gecici_angle;
long eski_min_yol=0,eski_max_yol=0,yeni_max_yol=0,yeni_min_yol=0,ana_temp=0;
//struct highspeed gecici={0};
//char flag=0;//DozerMapper dz; 
//DEBUG.WorkingFunction.bit.CALCULATE=1;
//double eski_hiz=0;

//kontur_write(tane);
/*long tane=hsp.size();
if(tane==0)tane=1;
else tane=tane+1;
*//*
k=1;
ana_temp=0;
int l=0;//13//feb//2006 haluk long idi..

for(i=0;i<hsp.size();i++){hsp.set(i,kontur_isle(hsp.get(i+1),hsp.get(i))); 
ana_temp+=hsp.get(i).temp;
}
                    
//tane=k;
ana_temp=0;


for( l=0;l<hsp.size();l++){
//hsp=hard_read(l);
//ana_temp=0;
m=0;l=hsp.size();

if(ana_temp==0)continue;
for(i=m;i<l;i++){
//hsp=hard_read(i);
if((hsp.get(i).plazma_durum&8)==8)AjanMachine.accel=700;//25//feb//2004 bostaki AjanMachine.accel 700 oldu..
else AjanMachine.accel=AjanMachine.RampAccel;
if(hsp.get(i)._angle!=0.){
hsp.get(i).corner_max_v_yol=aci_to_yol(hsp.get(i)._angle);
hsp.get(i).normal_limited_v_yol=(long)((hsp.get(i).hiz/3.)*(hsp.get(i).hiz/3.)*1.25/AjanMachine.accel);
if(hsp.get(i).corner_max_v_yol<hsp.get(i).normal_limited_v_yol)hsp.get(i).normal_limited_v_yol=hsp.get(i).corner_max_v_yol;
                         }

else if(i>0)if(old_velocity>hsp.get(i).hiz){
hsp.get(i).normal_limited_v_yol=(long)((hsp.get(i).hiz/3.)*(hsp.get(i).hiz/3.)*1.25/AjanMachine.accel);
hsp.get(i).corner_max_v_yol=(long)((1.25*hsp.get(i).hiz/3.)*(1.25*hsp.get(i).hiz/3.)*1.25/AjanMachine.accel);
if(hsp.get(i).corner_max_v_yol>1.25*6000.*6000./(9.*AjanMachine.accel))hsp.get(i).corner_max_v_yol=(long)(1.25*6000.*6000./(9.*AjanMachine.accel));
                                           }

//hard_write(i,hsp);
old_velocity=hsp.get(i).hiz;
toplam_kontur_uz=hsp.get(i).temp;

if(hsp.get(i)._angle==0){
for(j=i+1;j<l&&(hsp.get(j)._angle==0);j++)
{
    gecici=hsp.get(j);
angle_for_arc=ara_aci(hsp.get(i),gecici);
if((hsp.get(i).plazma_durum&8)==8)AjanMachine.accel=700;
else AjanMachine.accel=AjanMachine.RampAccel;

if(angle_for_arc>0.&&(toplam_kontur_uz/angle_for_arc)<3500.){

if(angle_for_arc>=3.*Math.PI/2./9){
gecici_velocity=hsp.get(i).hiz;
gecici_angle=radius_to_aci(toplam_kontur_uz/angle_for_arc,gecici_velocity);
hsp.get(i).corner_max_v_yol=aci_to_yol(gecici_angle);
if(gecici_velocity>gecici.hiz)gecici_velocity=gecici.hiz;
hsp.get(i).normal_limited_v_yol=(long)((gecici_velocity/3.)*(gecici_velocity/3.)*1.25/AjanMachine.accel);
hsp.get(i)._angle=gecici_angle;

for(k=i+1;k<=j;k++){
//gecici=hsp.get(k);
old_velocity=hsp.get(k).hiz=gecici_velocity;
hsp.get(k).sabit_hiz_flag=true;
//hard_write(k,gecici);
                  }//for(k=i+1;k<=j;k++)
//hard_write(i,hsp);
i=j;
break;
                              } //if(angle_for_arc>=3.*Math.PI/2./9)


                                                         }//if(angle_for_arc>0.&&(toplam_kontur_uz/angle_for_arc)<3250.){
else break;
toplam_kontur_uz+=gecici.temp;
}//for(j=i+1;angle_for_arc=ara_aci(hsp,gecici=hard_read(j)),j<=tane&&gecici._angle==0;j++)

}//if(hsp._angle==0)

}//for(i=0;i<tane;i++){
eski_min_yol=0;
eski_max_yol=0;
toplam_kontur_uz=0;

for(i=l-1;i>=m;i--){
//if((inportb(ANI_PORT)&128)==0)pause_cont(0);
//if(salin)break;
//hsp=hard_read(i);
if(hsp.get(i).corner_max_v_yol>0){
if(hsp.get(i).corner_max_v_yol>hsp.get(i).normal_limited_v_yol){
if(hsp.get(i).normal_limited_v_yol*1.25*1.25>hsp.get(i).corner_max_v_yol)yeni_max_yol=hsp.get(i).corner_max_v_yol;
else yeni_max_yol=(long)(hsp.get(i).normal_limited_v_yol*1.25*1.25);
                                                               }
else  yeni_max_yol=hsp.get(i).corner_max_v_yol;
      yeni_min_yol=hsp.get(i).normal_limited_v_yol;

if(yeni_max_yol>eski_min_yol){
if((yeni_max_yol-eski_min_yol)<=toplam_kontur_uz){
toplam_kontur_uz=0;
eski_min_yol=yeni_min_yol;
eski_max_yol=yeni_max_yol;


                                                 }//if((yeni_max_yol-eski_min_yol)<toplam_kontur_uz)

                             }//if(yeni_max_yol>eski_min_yol)
else{
toplam_kontur_uz=0;
eski_min_yol=yeni_min_yol;
eski_max_yol=yeni_max_yol;
    }
                                 }//if(hsp.corner_max_v_yol>0){

hsp.get(i).normal_limited_v_yol=eski_min_yol;
hsp.get(i).corner_max_v_yol=eski_max_yol;
toplam_kontur_uz+=hsp.get(i).temp;
hsp.get(i).block_kalan_yol=toplam_kontur_uz;
hsp.get(i).ana_temp=ana_temp;


                   }//for(i=l-1;i>=m;i--){


}//for(int l=0;l<tane;l++){
*/

                           
}
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        canvas = new MyCanvas();
        panel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ProjectFilesList = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        prjNameLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        IhsTypeSw = new javax.swing.JRadioButton();
        ThcTypeAuto = new javax.swing.JRadioButton();
        IhsTypeArc = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        ThcTypeOff = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();
        ThcTypeOn = new javax.swing.JRadioButton();
        IhsTypeOhm = new javax.swing.JRadioButton();
        IhsTypeOff = new javax.swing.JRadioButton();
        CutParametersIndicator = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ArcVoltageIndicator1 = new javax.swing.JLabel();
        ArcVoltageIndicator2 = new javax.swing.JLabel();
        ArcVoltageIndicator3 = new javax.swing.JLabel();
        ArcVoltageIndicator = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        PlasmaPressureIndicator1 = new javax.swing.JLabel();
        PlasmaPressureIndicator = new javax.swing.JLabel();
        PlasmaPressureIndicator3 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        ShieldPressureIndicator = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        PierceTimeIndicator = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        PierceHeightIndicator = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        CutHeightIndicator = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        FeedRateIndicator = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CncFaultsMain = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        posTLIndicator = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        posTRIndicator = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        BacWardResumeButton = new javax.swing.JToggleButton();
        RESUMEButton = new javax.swing.JToggleButton();
        IhsButton = new javax.swing.JButton();
        GoZeroButton = new javax.swing.JToggleButton();
        ThcHomeButton = new javax.swing.JButton();
        AutoZeroButton = new javax.swing.JToggleButton();
        MachineZeroButton = new javax.swing.JToggleButton();
        HandControl = new javax.swing.JToggleButton();
        ABORTButton = new javax.swing.JToggleButton();
        PAUSEButton = new javax.swing.JToggleButton();
        RUNButton = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        posxIndicator = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        posYIndicator = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        toolOffset = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AjanControl");
        setBounds(new java.awt.Rectangle(10, 10, 1800, 1000));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(300, 100));
        setModalExclusionType(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
                actived(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                keylisten(evt);
            }
        });

        canvas.setBackground(java.awt.Color.white);
        canvas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        canvas.setForeground(new java.awt.Color(176, 16, 235));
        canvas.setMinimumSize(new java.awt.Dimension(25, 25));
        canvas.setName(""); // NOI18N
        canvas.setPreferredSize(new java.awt.Dimension(1350, 1000));
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });
        canvas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                canvasComponentResized(evt);
            }
        });
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }
        });
        canvas.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                canvasMouseWheelMoved(evt);
            }
        });

        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Project Viewer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        ProjectFilesList.setBackground(new java.awt.Color(240, 240, 240));
        ProjectFilesList.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Cutting Files", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        ProjectFilesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProjectFilesListMouseClicked(evt);
            }
        });
        ProjectFilesList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ProjectFilesListKeyPressed(evt);
            }
        });
        ProjectFilesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ProjectFilesListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(ProjectFilesList);

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        prjNameLabel.setText("Project Name : ");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prjNameLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 21, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(prjNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane2.setPreferredSize(new java.awt.Dimension(1272, 112));

        jPanel1.setMinimumSize(new java.awt.Dimension(25, 110));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup2.add(IhsTypeSw);
        IhsTypeSw.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IhsTypeSw.setText("SW");
        IhsTypeSw.setBorder(null);
        IhsTypeSw.setBorderPainted(true);
        IhsTypeSw.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                IhsTypeSwÄ°temStateChanged(evt);
            }
        });
        IhsTypeSw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IhsTypeSwActionPerformed(evt);
            }
        });

        buttonGroup1.add(ThcTypeAuto);
        ThcTypeAuto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ThcTypeAuto.setText("AUTO");
        ThcTypeAuto.setBorder(null);
        ThcTypeAuto.setBorderPainted(true);
        ThcTypeAuto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ThcTypeAuto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ThcTypeAutoÄ°temStateChanged(evt);
            }
        });
        ThcTypeAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThcTypeAutoActionPerformed(evt);
            }
        });

        buttonGroup2.add(IhsTypeArc);
        IhsTypeArc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IhsTypeArc.setText("ARC");
        IhsTypeArc.setBorder(null);
        IhsTypeArc.setBorderPainted(true);
        IhsTypeArc.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        IhsTypeArc.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        IhsTypeArc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                IhsTypeArcÄ°temStateChanged(evt);
            }
        });
        IhsTypeArc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IhsTypeArcActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("ThcType");

        buttonGroup1.add(ThcTypeOff);
        ThcTypeOff.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ThcTypeOff.setText("OFF");
        ThcTypeOff.setBorder(null);
        ThcTypeOff.setBorderPainted(true);
        ThcTypeOff.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ThcTypeOff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ThcTypeOffÄ°temStateChanged(evt);
            }
        });
        ThcTypeOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThcTypeOffActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel21.setText("IhsType");

        buttonGroup1.add(ThcTypeOn);
        ThcTypeOn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ThcTypeOn.setText("ON");
        ThcTypeOn.setBorder(null);
        ThcTypeOn.setBorderPainted(true);
        ThcTypeOn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ThcTypeOn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ThcTypeOnÄ°temStateChanged(evt);
            }
        });
        ThcTypeOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThcTypeOnActionPerformed(evt);
            }
        });

        buttonGroup2.add(IhsTypeOhm);
        IhsTypeOhm.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IhsTypeOhm.setText("OHM");
        IhsTypeOhm.setBorder(null);
        IhsTypeOhm.setBorderPainted(true);
        IhsTypeOhm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                IhsTypeOhmÄ°temStateChanged(evt);
            }
        });
        IhsTypeOhm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IhsTypeOhmActionPerformed(evt);
            }
        });

        buttonGroup2.add(IhsTypeOff);
        IhsTypeOff.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IhsTypeOff.setText("OFF");
        IhsTypeOff.setBorder(null);
        IhsTypeOff.setBorderPainted(true);
        IhsTypeOff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                IhsTypeOffÄ°temStateChanged(evt);
            }
        });
        IhsTypeOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IhsTypeOffActionPerformed(evt);
            }
        });

        CutParametersIndicator.setBackground(new java.awt.Color(153, 222, 97));
        CutParametersIndicator.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CutParametersIndicator.setForeground(new java.awt.Color(153, 12, 106));
        CutParametersIndicator.setText("<html><center><font size=5>Mild Steel 260Amp 4mm O2/AIR</font></center></html>");
        CutParametersIndicator.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 153), null, new java.awt.Color(0, 153, 153)));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Arc Voltage (volt)", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 14), new java.awt.Color(153, 153, 0))); // NOI18N
        jPanel7.setForeground(new java.awt.Color(153, 153, 0));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 153, 0));
        jLabel8.setText("AvV :");
        jPanel7.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 153, 0));
        jLabel9.setText("AvW :");
        jPanel7.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 153, 0));
        jLabel10.setText("AvL :");
        jPanel7.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 153, 0));
        jLabel11.setText("AvR :");
        jPanel7.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        ArcVoltageIndicator1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        ArcVoltageIndicator1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        ArcVoltageIndicator1.setForeground(new java.awt.Color(153, 153, 0));
        ArcVoltageIndicator1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArcVoltageIndicator1.setText("120/120");
        ArcVoltageIndicator1.setToolTipText("");
        ArcVoltageIndicator1.setMaximumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator1.setMinimumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator1.setName(""); // NOI18N
        ArcVoltageIndicator1.setPreferredSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator1.setRequestFocusEnabled(false);
        jPanel7.add(ArcVoltageIndicator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 80, 20));

        ArcVoltageIndicator2.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        ArcVoltageIndicator2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        ArcVoltageIndicator2.setForeground(new java.awt.Color(153, 153, 0));
        ArcVoltageIndicator2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArcVoltageIndicator2.setText("120/120");
        ArcVoltageIndicator2.setToolTipText("");
        ArcVoltageIndicator2.setMaximumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator2.setMinimumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator2.setName(""); // NOI18N
        ArcVoltageIndicator2.setPreferredSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator2.setRequestFocusEnabled(false);
        jPanel7.add(ArcVoltageIndicator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 80, 20));

        ArcVoltageIndicator3.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        ArcVoltageIndicator3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        ArcVoltageIndicator3.setForeground(new java.awt.Color(153, 153, 0));
        ArcVoltageIndicator3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArcVoltageIndicator3.setText("120/120");
        ArcVoltageIndicator3.setToolTipText("");
        ArcVoltageIndicator3.setMaximumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator3.setMinimumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator3.setName(""); // NOI18N
        ArcVoltageIndicator3.setPreferredSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator3.setRequestFocusEnabled(false);
        jPanel7.add(ArcVoltageIndicator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 80, 20));

        ArcVoltageIndicator.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        ArcVoltageIndicator.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        ArcVoltageIndicator.setForeground(new java.awt.Color(153, 153, 0));
        ArcVoltageIndicator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArcVoltageIndicator.setText("120/120");
        ArcVoltageIndicator.setToolTipText("");
        ArcVoltageIndicator.setMaximumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator.setName(""); // NOI18N
        ArcVoltageIndicator.setPreferredSize(new java.awt.Dimension(30, 40));
        ArcVoltageIndicator.setRequestFocusEnabled(false);
        jPanel7.add(ArcVoltageIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 80, 20));

        jLabel26.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(153, 153, 0));
        jLabel26.setText("SET");
        jPanel7.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 3, 30, 20));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Pressure (bar)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 153, 0))); // NOI18N
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 153, 0));
        jLabel12.setText("SET");
        jPanel8.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 153, 0));
        jLabel13.setText("SCL :");
        jPanel8.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 153, 0));
        jLabel14.setText("PCR :");
        jPanel8.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabel22.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 153, 0));
        jLabel22.setText("SCR :");
        jPanel8.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        PlasmaPressureIndicator1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        PlasmaPressureIndicator1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        PlasmaPressureIndicator1.setForeground(new java.awt.Color(0, 153, 0));
        PlasmaPressureIndicator1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlasmaPressureIndicator1.setText("<html>99.99/99.99</html> ");
        PlasmaPressureIndicator1.setToolTipText("");
        PlasmaPressureIndicator1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        PlasmaPressureIndicator1.setMaximumSize(new java.awt.Dimension(30, 40));
        PlasmaPressureIndicator1.setMinimumSize(new java.awt.Dimension(30, 40));
        PlasmaPressureIndicator1.setName(""); // NOI18N
        PlasmaPressureIndicator1.setPreferredSize(new java.awt.Dimension(141, 40));
        PlasmaPressureIndicator1.setRequestFocusEnabled(false);
        jPanel8.add(PlasmaPressureIndicator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 100, 20));

        PlasmaPressureIndicator.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        PlasmaPressureIndicator.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        PlasmaPressureIndicator.setForeground(new java.awt.Color(0, 153, 0));
        PlasmaPressureIndicator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlasmaPressureIndicator.setText("<html>99.99/99.99</html> ");
        PlasmaPressureIndicator.setToolTipText("");
        PlasmaPressureIndicator.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        PlasmaPressureIndicator.setMaximumSize(new java.awt.Dimension(30, 40));
        PlasmaPressureIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        PlasmaPressureIndicator.setName(""); // NOI18N
        PlasmaPressureIndicator.setPreferredSize(new java.awt.Dimension(141, 40));
        PlasmaPressureIndicator.setRequestFocusEnabled(false);
        jPanel8.add(PlasmaPressureIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 57, 120, 20));

        PlasmaPressureIndicator3.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        PlasmaPressureIndicator3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        PlasmaPressureIndicator3.setForeground(new java.awt.Color(0, 153, 0));
        PlasmaPressureIndicator3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlasmaPressureIndicator3.setText("<html>99.99/99.99</html> ");
        PlasmaPressureIndicator3.setToolTipText("");
        PlasmaPressureIndicator3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        PlasmaPressureIndicator3.setMaximumSize(new java.awt.Dimension(30, 40));
        PlasmaPressureIndicator3.setMinimumSize(new java.awt.Dimension(30, 40));
        PlasmaPressureIndicator3.setName(""); // NOI18N
        PlasmaPressureIndicator3.setPreferredSize(new java.awt.Dimension(141, 40));
        PlasmaPressureIndicator3.setRequestFocusEnabled(false);
        jPanel8.add(PlasmaPressureIndicator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 37, 120, 20));

        jLabel24.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 153, 0));
        jLabel24.setText("PCL :");
        jPanel8.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        ShieldPressureIndicator.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        ShieldPressureIndicator.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        ShieldPressureIndicator.setForeground(new java.awt.Color(0, 153, 0));
        ShieldPressureIndicator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ShieldPressureIndicator.setText("<html>99.99/99.99</html> ");
        ShieldPressureIndicator.setToolTipText("");
        ShieldPressureIndicator.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        ShieldPressureIndicator.setMaximumSize(new java.awt.Dimension(30, 40));
        ShieldPressureIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        ShieldPressureIndicator.setName(""); // NOI18N
        ShieldPressureIndicator.setPreferredSize(new java.awt.Dimension(141, 40));
        ShieldPressureIndicator.setRequestFocusEnabled(false);
        jPanel8.add(ShieldPressureIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 75, 120, 20));

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "PierceTime", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 14), new java.awt.Color(37, 33, 98))); // NOI18N
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PierceTimeIndicator.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        PierceTimeIndicator.setFont(new java.awt.Font("Digital-7", 1, 35)); // NOI18N
        PierceTimeIndicator.setForeground(new java.awt.Color(37, 33, 98));
        PierceTimeIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PierceTimeIndicator.setText("99.9");
        PierceTimeIndicator.setToolTipText("");
        PierceTimeIndicator.setMaximumSize(new java.awt.Dimension(30, 40));
        PierceTimeIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        PierceTimeIndicator.setName(""); // NOI18N
        PierceTimeIndicator.setPreferredSize(new java.awt.Dimension(30, 40));
        PierceTimeIndicator.setRequestFocusEnabled(false);
        jPanel11.add(PierceTimeIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 80, 40));

        jLabel20.setText("sec");
        jPanel11.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Pierce Height", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 14), new java.awt.Color(153, 153, 0))); // NOI18N
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PierceHeightIndicator.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        PierceHeightIndicator.setFont(new java.awt.Font("Digital-7", 1, 35)); // NOI18N
        PierceHeightIndicator.setForeground(new java.awt.Color(153, 153, 0));
        PierceHeightIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PierceHeightIndicator.setText("99.9");
        PierceHeightIndicator.setToolTipText("");
        PierceHeightIndicator.setMaximumSize(new java.awt.Dimension(30, 40));
        PierceHeightIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        PierceHeightIndicator.setName(""); // NOI18N
        PierceHeightIndicator.setPreferredSize(new java.awt.Dimension(30, 40));
        PierceHeightIndicator.setRequestFocusEnabled(false);
        jPanel10.add(PierceHeightIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 40));

        jLabel18.setText("mm");
        jPanel10.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Cut Height", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 14), new java.awt.Color(51, 0, 254))); // NOI18N
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CutHeightIndicator.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        CutHeightIndicator.setFont(new java.awt.Font("Digital-7", 1, 35)); // NOI18N
        CutHeightIndicator.setForeground(new java.awt.Color(51, 0, 254));
        CutHeightIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CutHeightIndicator.setText("99.9");
        CutHeightIndicator.setToolTipText("");
        CutHeightIndicator.setMaximumSize(new java.awt.Dimension(30, 40));
        CutHeightIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        CutHeightIndicator.setName(""); // NOI18N
        CutHeightIndicator.setPreferredSize(new java.awt.Dimension(30, 40));
        CutHeightIndicator.setRequestFocusEnabled(false);
        jPanel12.add(CutHeightIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 70, 40));

        jLabel19.setText("mm");
        jPanel12.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "FeedRate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 14), new java.awt.Color(51, 0, 204))); // NOI18N
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FeedRateIndicator.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        FeedRateIndicator.setFont(new java.awt.Font("Digital-7", 0, 45)); // NOI18N
        FeedRateIndicator.setForeground(new java.awt.Color(51, 0, 204));
        FeedRateIndicator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FeedRateIndicator.setText("15000");
        FeedRateIndicator.setToolTipText("");
        FeedRateIndicator.setMaximumSize(new java.awt.Dimension(30, 40));
        FeedRateIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        FeedRateIndicator.setName(""); // NOI18N
        FeedRateIndicator.setPreferredSize(new java.awt.Dimension(30, 40));
        FeedRateIndicator.setRequestFocusEnabled(false);
        jPanel9.add(FeedRateIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 140, -1));

        jLabel16.setText("mm/min");
        jPanel9.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(CutParametersIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(5, 5, 5)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ThcTypeOn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ThcTypeOff, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ThcTypeAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(27, 27, 27)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(IhsTypeArc, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(IhsTypeOhm, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(IhsTypeSw, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(IhsTypeOff, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(5, 5, 5)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(CutParametersIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(ThcTypeOn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(ThcTypeOff, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(ThcTypeAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(IhsTypeArc, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(IhsTypeOhm, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(IhsTypeSw, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(IhsTypeOff, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 1260, 110));

        CncFaultsMain.setBackground(new java.awt.Color(255, 0, 0));
        CncFaultsMain.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        CncFaultsMain.setForeground(new java.awt.Color(255, 255, 255));
        CncFaultsMain.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "+ x limit" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        CncFaultsMain.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        CncFaultsMain.setToolTipText("");
        CncFaultsMain.setVisibleRowCount(0);
        CncFaultsMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CncFaultsMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CncFaultsMain);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1380, 0, 130, 100));

        jScrollPane2.setViewportView(jPanel1);

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setPreferredSize(new java.awt.Dimension(6, 10));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel15.setBackground(new java.awt.Color(204, 204, 204));
        jPanel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Digital-7", 1, 45)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 153, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("0.00");
        jLabel7.setToolTipText("");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel7.setMaximumSize(new java.awt.Dimension(20, 30));
        jLabel7.setMinimumSize(new java.awt.Dimension(30, 40));
        jLabel7.setOpaque(true);
        jLabel7.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel15.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 170, 40));

        jLabel28.setForeground(new java.awt.Color(153, 153, 0));
        jLabel28.setText("Â°");
        jPanel15.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 5, -1, -1));

        jLabel36.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(153, 153, 0));
        jLabel36.setText("A");
        jPanel15.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 22, -1, -1));

        jPanel16.setBackground(new java.awt.Color(204, 204, 204));
        jPanel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel16.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setFont(new java.awt.Font("Digital-7", 1, 45)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("0.00");
        jLabel4.setToolTipText("");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setMaximumSize(new java.awt.Dimension(20, 30));
        jLabel4.setMinimumSize(new java.awt.Dimension(30, 40));
        jLabel4.setOpaque(true);
        jLabel4.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel16.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 170, 40));

        jLabel31.setForeground(new java.awt.Color(255, 0, 51));
        jLabel31.setText("Â°");
        jPanel16.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 5, -1, -1));

        jLabel37.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 0, 51));
        jLabel37.setText("C");
        jPanel16.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 22, -1, -1));

        jPanel17.setBackground(new java.awt.Color(204, 204, 204));
        jPanel17.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setBackground(new java.awt.Color(204, 204, 204));
        jLabel15.setFont(new java.awt.Font("Digital-7", 1, 45)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 102, 102));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("0.00");
        jLabel15.setToolTipText("");
        jLabel15.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel15.setMaximumSize(new java.awt.Dimension(20, 30));
        jLabel15.setMinimumSize(new java.awt.Dimension(30, 40));
        jLabel15.setOpaque(true);
        jLabel15.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel17.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 170, 40));

        jLabel32.setForeground(new java.awt.Color(0, 102, 102));
        jLabel32.setText("Â°");
        jPanel17.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 5, -1, -1));

        jLabel38.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 102, 102));
        jLabel38.setText("D");
        jPanel17.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 22, -1, -1));

        jPanel19.setBackground(new java.awt.Color(204, 204, 204));
        jPanel19.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        posTLIndicator.setBackground(new java.awt.Color(204, 204, 204));
        posTLIndicator.setFont(new java.awt.Font("Digital-7", 1, 45)); // NOI18N
        posTLIndicator.setForeground(new java.awt.Color(255, 102, 0));
        posTLIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        posTLIndicator.setText("0.00");
        posTLIndicator.setToolTipText("");
        posTLIndicator.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        posTLIndicator.setMaximumSize(new java.awt.Dimension(20, 30));
        posTLIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        posTLIndicator.setOpaque(true);
        posTLIndicator.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel19.add(posTLIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 170, 40));

        jLabel41.setForeground(new java.awt.Color(255, 102, 0));
        jLabel41.setText("TL");
        jPanel19.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 25, -1, -1));

        jLabel42.setForeground(new java.awt.Color(255, 102, 0));
        jLabel42.setText("mm");
        jPanel19.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 5, -1, -1));

        jPanel20.setBackground(new java.awt.Color(204, 204, 204));
        jPanel20.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel20.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        posTRIndicator.setBackground(new java.awt.Color(204, 204, 204));
        posTRIndicator.setFont(new java.awt.Font("Digital-7", 1, 45)); // NOI18N
        posTRIndicator.setForeground(new java.awt.Color(102, 102, 0));
        posTRIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        posTRIndicator.setText("0.00");
        posTRIndicator.setToolTipText("");
        posTRIndicator.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        posTRIndicator.setMaximumSize(new java.awt.Dimension(20, 30));
        posTRIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        posTRIndicator.setOpaque(true);
        posTRIndicator.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel20.add(posTRIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 170, 40));

        jLabel44.setForeground(new java.awt.Color(102, 102, 0));
        jLabel44.setText("TR");
        jPanel20.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 25, -1, -1));

        jLabel45.setForeground(new java.awt.Color(102, 102, 0));
        jLabel45.setText("mm");
        jPanel20.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 5, -1, -1));

        jPanel21.setBackground(new java.awt.Color(204, 204, 204));
        jPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel46.setBackground(new java.awt.Color(204, 204, 204));
        jLabel46.setFont(new java.awt.Font("Digital-7", 1, 45)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(153, 153, 255));
        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel46.setText("0.00");
        jLabel46.setToolTipText("");
        jLabel46.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel46.setMaximumSize(new java.awt.Dimension(20, 30));
        jLabel46.setMinimumSize(new java.awt.Dimension(30, 40));
        jLabel46.setOpaque(true);
        jLabel46.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel21.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 170, 40));

        jLabel47.setForeground(new java.awt.Color(153, 153, 255));
        jLabel47.setText("TV");
        jPanel21.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 25, -1, -1));

        jLabel48.setForeground(new java.awt.Color(153, 153, 255));
        jLabel48.setText("mm");
        jPanel21.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 5, -1, -1));

        jPanel18.setBackground(new java.awt.Color(204, 204, 204));
        jPanel18.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel30.setBackground(new java.awt.Color(204, 204, 204));
        jLabel30.setFont(new java.awt.Font("Digital-7", 1, 45)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 0, 204));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel30.setText("0.00");
        jLabel30.setToolTipText("");
        jLabel30.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel30.setMaximumSize(new java.awt.Dimension(20, 30));
        jLabel30.setMinimumSize(new java.awt.Dimension(30, 40));
        jLabel30.setOpaque(true);
        jLabel30.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel18.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 170, 40));

        jLabel33.setForeground(new java.awt.Color(255, 0, 204));
        jLabel33.setText("TW");
        jPanel18.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 25, -1, -1));

        jLabel39.setForeground(new java.awt.Color(255, 0, 204));
        jLabel39.setText("mm");
        jPanel18.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 5, -1, -1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel15, jPanel16, jPanel17, jPanel18, jPanel19, jPanel20, jPanel21});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BacWardResumeButton.setText("RESUMEBACK");
        BacWardResumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BacWardResumeButtonActionPerformed(evt);
            }
        });

        RESUMEButton.setText("RESUME");
        RESUMEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RESUMEButtonActionPerformed(evt);
            }
        });

        IhsButton.setText("Ihs");
        IhsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IhsButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IhsButtonMouseReleased(evt);
            }
        });

        GoZeroButton.setText("GoZero");
        GoZeroButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GoZeroButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GoZeroButtonMouseReleased(evt);
            }
        });
        GoZeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoZeroButtonActionPerformed(evt);
            }
        });

        ThcHomeButton.setText("Thc Home");
        ThcHomeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ThcHomeButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ThcHomeButtonMouseReleased(evt);
            }
        });

        AutoZeroButton.setText("AutoZero");
        AutoZeroButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AutoZeroButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AutoZeroButtonMouseReleased(evt);
            }
        });
        AutoZeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoZeroButtonActionPerformed(evt);
            }
        });

        MachineZeroButton.setText("<html><center>Machine<br>Zero</center></html>"); // NOI18N
        MachineZeroButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MachineZeroButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MachineZeroButtonMouseReleased(evt);
            }
        });
        MachineZeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MachineZeroButtonActionPerformed(evt);
            }
        });

        HandControl.setText("HAND_C");
        HandControl.setToolTipText("");
        HandControl.setActionCommand("hand\nControl");
        HandControl.setDoubleBuffered(true);
        HandControl.setOpaque(true);
        HandControl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HandControlMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                HandControlMouseReleased(evt);
            }
        });
        HandControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HandControlActionPerformed(evt);
            }
        });

        ABORTButton.setText("ABORT");
        ABORTButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ABORTButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ABORTButtonMouseReleased(evt);
            }
        });
        ABORTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ABORTButtonActionPerformed(evt);
            }
        });

        PAUSEButton.setText("PAUSE");
        PAUSEButton.setToolTipText("");
        PAUSEButton.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                PAUSEButtonAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        PAUSEButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PAUSEButtonMousePressed(evt);
            }
        });
        PAUSEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PAUSEButtonActionPerformed(evt);
            }
        });

        RUNButton.setText("RUN");
        RUNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RUNButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(HandControl, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addComponent(RESUMEButton, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addComponent(BacWardResumeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addComponent(MachineZeroButton)
                        .addComponent(AutoZeroButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ThcHomeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(GoZeroButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(IhsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ABORTButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                    .addComponent(RUNButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PAUSEButton, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ABORTButton, AutoZeroButton, BacWardResumeButton, GoZeroButton, HandControl, IhsButton, MachineZeroButton, PAUSEButton, RESUMEButton, RUNButton, ThcHomeButton});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RUNButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PAUSEButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ABORTButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HandControl, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MachineZeroButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AutoZeroButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ThcHomeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GoZeroButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IhsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RESUMEButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BacWardResumeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        posxIndicator.setBackground(new java.awt.Color(204, 204, 204));
        posxIndicator.setFont(new java.awt.Font("Digital-7", 1, 50)); // NOI18N
        posxIndicator.setForeground(new java.awt.Color(255, 0, 51));
        posxIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        posxIndicator.setText("0.00");
        posxIndicator.setToolTipText("");
        posxIndicator.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        posxIndicator.setMaximumSize(new java.awt.Dimension(20, 30));
        posxIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        posxIndicator.setOpaque(true);
        posxIndicator.setPreferredSize(new java.awt.Dimension(18, 32));
        jPanel13.add(posxIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 230, 40));

        jLabel27.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 0, 51));
        jLabel27.setText("mm");
        jPanel13.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, -1, -1));

        jLabel34.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 0, 51));
        jLabel34.setText("X");
        jPanel13.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 15, -1, -1));

        jPanel14.setBackground(new java.awt.Color(204, 204, 204));
        jPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel14.setPreferredSize(new java.awt.Dimension(255, 45));
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel29.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(153, 153, 0));
        jLabel29.setText("mm");
        jPanel14.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, -1, -1));

        posYIndicator.setBackground(new java.awt.Color(204, 204, 204));
        posYIndicator.setFont(new java.awt.Font("Digital-7", 1, 50)); // NOI18N
        posYIndicator.setForeground(new java.awt.Color(153, 153, 0));
        posYIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        posYIndicator.setText("0.00");
        posYIndicator.setToolTipText("");
        posYIndicator.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        posYIndicator.setMaximumSize(new java.awt.Dimension(20, 30));
        posYIndicator.setMinimumSize(new java.awt.Dimension(30, 40));
        posYIndicator.setOpaque(true);
        posYIndicator.setPreferredSize(new java.awt.Dimension(18, 32));
        posYIndicator.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                posYIndicatorComponentMoved(evt);
            }
        });
        jPanel14.add(posYIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 230, 40));

        jLabel35.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(153, 153, 0));
        jLabel35.setText("Y");
        jPanel14.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 15, -1, -1));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jMenuBar1.setBackground(new java.awt.Color(232, 139, 165));
        jMenuBar1.setForeground(new java.awt.Color(57, 56, 49));
        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseClicked(evt);
            }
        });

        jMenu1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenu1.setText("Project");

        jMenuItem13.setText("New Project");
        jMenuItem13.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem13);

        jMenuItem1.setText("Open Project");
        jMenuItem1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuItem1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem11.setText("Open Dxf/Essi");
        jMenuItem11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuItem11.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jMenuItem11AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem11);

        jMenuItem2.setText("Save Project");
        jMenuItem2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Close");
        jMenuItem3.setToolTipText("");
        jMenuItem3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Transfer File");
        jMenuItem4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Tools");

        toolOffset.setText("offset vect");
        toolOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolOffsetActionPerformed(evt);
            }
        });
        jMenu4.add(toolOffset);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Parameters");
        jMenu5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu5KeyPressed(evt);
            }
        });

        jMenuItem8.setText("CutCharts ");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem9.setText("CutParameters");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem10.setText("MachineParameters");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem14.setText("Show Project Window");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem14);

        jMenuBar1.add(jMenu5);

        jMenu3.setText("Help");

        jMenuItem5.setText("index");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("version");
        jMenu3.add(jMenuItem6);

        jMenuItem7.setText("jMenuItem7");
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1464, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1546, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        canvas.getAccessibleContext().setAccessibleName("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
public void Database(){
   
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName(JDBC_DRIVER);

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println("Creating statement...");
      stmt = conn.createStatement();
      String sql;
//      sql = "SELECT \"No\" ,\"Material\",\"Thickness\", \"Current\",\"Gases\"  FROM hplazma";
   //sql = "SELECT * FROM hplazma WHERE Current='30 Amp'";
   sql = "SELECT * FROM messages WHERE MsgNo=567";
            //sql="Hplazma.findByMaterial";  
//Hp
            ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         String id  = rs.getString("English");        
         System.out.print(id);
         /*String id  = rs.getString("Material");        
         //Float last = rs.getFloat("Thickness");
         String age = rs.getString("Current");
         String first = rs.getString("Gases");
         Float last = rs.getFloat("Thickness");
         Integer No = rs.getInt("No");
System.out.print(id);
         //Display values
         System.out.print("no: " + No);
         System.out.print(" material: " + id);
         System.out.print(" current" + age);
         System.out.print(" gases: " + first);
         System.out.println(" Thic: " + last);*/
         /*System.out.print(" current" + age);
         System.out.print(" gases: " + first);
         System.out.println(" Thic: " + last);*/
      //System.out.print("/n");
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println("Goodbye!");
//}//end main
//}//end FirstExample
}
    public void Recv() throws IOException 
{
    if (in.readLine()!=null) {
//        textField4.setText( in.readLine());
    } 
    }// else return "";
//}
  public void sendFile() throws FileNotFoundException, IOException{
  FileInputStream fis = null;
  BufferedInputStream bis;
  OutputStream os = null;
      File myFile = new File (FILE_TO_SEND);  
      
//InputStream r = socket.get
  //      getInputStream();
 //os = socket.getOutputStream();                 
                int bytes = 0;
                int sayac=0;
      byte [] mybytearray  = new byte [1024];  
                  fis = new FileInputStream(myFile);  
                  bis = new BufferedInputStream(fis); 
                while(true){  
               //  File myFile = new File (FILE_TO_SEND);  
                  
                  bytes =  bis.read(mybytearray,0,mybytearray.length);  
                 
                  System.out.println("Sending " + FILE_TO_SEND + "(" + mybytearray.length + " bytes)"+sayac+"byteNo");  
                    
                  if(bytes != -1 ){  
                //port.write(mybytearray, 0, bytes);
                      os.write(mybytearray,0,bytes);  
DatagramPacket sendPacket =new DatagramPacket(
        mybytearray,
        bytes,
        IPAddress, 23);
//serverSocket.send(sendPacket); 
                sayac++;
                  //sleep(1000);  
                   
                 // System.out.println("echo: " +ack);  
                    
                  }  
                    
                  else {  
     //               more = false;  
fis.close();                    
os.close();
                    break;
                  }  
                   
                   
 //                 System.out.println("Done.....");  
                    
                }  
  //    byte [] mybytearray  = new byte [1024];  
    //              fis = new FileInputStream(myFile);  
//+Time.valueOf(LocalTime.MIN) 
//System.out.println("Done....."+Time.valueOf(LocalTime.MIN));                    
  }/*@Override
public void paint(Graphics g) {
   super.paint(g);
   RefreshPanel();
}*/
   boolean drawEntity(dxfcnv oge){
   ///int i=no;drawEntity
  int xw=CX,yw=CY;
  lay1.setColor(Color.BLACK);
  double sangle=((180.*oge.EndAngle/Math.PI))
          ,eangle=(180.*Math.abs(oge.EndAngle-oge.StartAngle)/Math.PI);
        double xc= ((oge.xc-Math.abs(oge.radius))*Scale);
  double yc=((oge.yc+Math.abs(oge.radius))*Scale);
  //Scale=Scale/100;
        switch (oge.indx) {
            case 1:
                lay1.draw(new Line2D.Double(xw+(oge.xn1*Scale)
                        , yw-(oge.yn1*Scale),xw+(oge.xn2*Scale) ,yw-(oge.yn2*Scale)));
                break;
            case 2:
                //lay1.drawArc(0-50, 0-50, 100, 100, 45, 90);
                eangle=((180.*oge.StartAngle/Math.PI));
                sangle=((180.*oge.EndAngle/Math.PI));
                if(eangle<sangle)eangle+=360;
                eangle-=sangle;
                //lay1.drawArc(xw+(int)xc, yw-(int)yc, (int)Math.abs(oge.radius*Scale*2), (int)Math.abs(oge.radius*Scale*2), (int)Math.round(sangle), (int)Math.round(eangle));
                //lay1.draw(new Arc2D.Double(xw+(int)xc, yw-(int)yc, (int)Math.abs(oge.radius*Scale*2), (int)Math.abs(oge.radius*Scale*2), (int)Math.round(sangle), (int)Math.round(eangle),Arc2D.OPEN));
                 lay1.draw(new Arc2D.Double(xw+xc, yw-yc, Math.abs(oge.radius*Scale*2), Math.abs(oge.radius*Scale*2), sangle, eangle,Arc2D.OPEN));
                //(new Arc2D.Double(xs - ws/2, ys - hs/2, ws, hs, angle1, angle2 - angle1, Arc2D.OPEN));
                break;
            case 3:
                sangle=((180.*oge.StartAngle/Math.PI));
                eangle=((180.*oge.EndAngle/Math.PI));
                if(eangle<sangle)eangle+=360;
                eangle-=sangle;
                          //   lay1.drawArc(xw+(int)((oge.xc-Math.abs(oge.radius))*Scale), yw-(int)((oge.yc+Math.abs(oge.radius))*Scale), (int)Math.abs(oge.radius*Scale*2), (int)Math.abs(oge.radius*Scale*2), (int)sangle, (int)eangle);
               lay1.draw(new Arc2D.Double(xw+xc, yw-yc,Math.abs(oge.radius*Scale*2), Math.abs(oge.radius*Scale*2), sangle, eangle,Arc2D.OPEN));               
                               // lay1.drawArc(xw+(int)((oge.xc-Math.abs(oge.radius))*Scale), yw-(int)((oge.yc-Math.abs(oge.radius))*Scale), (int)Math.abs(oge.radius*Scale*2), (int)Math.abs(oge.radius*Scale*2), (int)sangle, (int)eangle);                
//lay1.drawArc(xw+(int)(oge.xc*Scale), yw-(int)(oge.yc*Scale), (int)Math.abs(oge.radius*Scale*2), (int)Math.abs(oge.radius*Scale*2), (int)(Math.PI*oge.StartAngle/180), (int)(Math.PI*oge.EndAngle/180.));
                break;
            case 4:
                lay1.drawArc(xw+(int)((oge.xc-Math.abs(oge.radius))*Scale), yw-(int)((oge.yc+Math.abs(oge.radius))*Scale), (int)(oge.radius*Scale*2), (int)(oge.radius*Scale*2),0, 360);
                break;
            default:
                return false;
        }
   return true;
       
   }
    /*
    public void DrawDxfEssi(Color color){
      //if(color==canvas.getBackground())        CoordinateAxisRefresh(color);        else CoordinateAxisRefresh(Color.gray);  
        lay1.setColor(color);
        for(int i=0;i<dxfVect.size();i++){
              if(dxfVect.get(i).oge.atrib<=-10) 
                  while(((i+1)<dxfVect.size())&&dxfVect.get(i).oge.atrib==dxfVect.get(i+1).oge.atrib){
                      drawEntity(dxfVect.get(i).oge);
                      i++;}
               drawEntity(dxfVect.get(i).oge);
                }

    }
    */


public void DrawContour(){
//st long xb=0,yb=0;
if(posxb!=AjanPortIn.PosX||posyb!=AjanPortIn.PosY){
//lay1.drawLine((int)(posxb/100.)*Scale,-(int)(posyb/100.)*Scale,(int)(AjanPortIn.PosX/100.)*Scale,-(int)(AjanPortIn.PosY/100.)*Scale);
//posxb=AjanPortIn.PosX;
//posyb=AjanPortIn.PosY;
vertex.add(new Contour(AjanPortIn.PosX,AjanPortIn.PosY));
   
}
if(AjanPortIn.stat.ArcTest){
PVData.add(new VoltagePressure(AjanPortIn.ArcVoltageR, AjanPortIn.ArcVoltageR, AjanPortIn.PlasmaPressureR, AjanPortIn.PlasmaPressureL));
GraphMenu.DrawPV();
}
};


 public void ContourAdd(){
   String[] hataliste=new String[35];  
 Color Gc=lay1.getColor(); 
//int x1=100;int y1=100;
//int x2=500;int y2=500;
//int x3=0;int y3=200;
int i=0,k=0;int newFault=0;
//lay1.setClip(10, 15, centerX, centerY);
//lay1.setColor(Color.BLACK);
//lay1.drawLine(100,100,200,200);
//lay1.translate(100, 100);

//i=0
if(AjanPortInOld==null)AjanPortInOld=new InfromCnc();

if(AjanPortInOld!=null){
if(AjanPortInOld.OverRideF!=AjanPortIn.OverRideF)
   // FeedRateIndicator.setText(String.valueOf( ((int)(100.*AjanPortIn.OverRideF*AjanCutParam.Plasma.CuttingSpeed/255.))/100.));
FeedRateIndicator.setText(String.valueOf((int)(AjanPortIn.OverRideF*AjanCutParam.Plasma.CuttingSpeed/100.)));
if(AjanPortInOld.OverRideV!=AjanPortIn.OverRideV)

        //ArcVoltageIndicator.setText(String.valueOf(AjanCutParam.Plasma.ArcVoltage+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.)));
ArcVoltageIndicator.setText(String.format("%03d",AjanPortIn.ArcVoltageR+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.))+" / "+String.format("%03d",AjanCutParam.Plasma.ArcVoltage));

//ArcVoltageIndicator.setText(String.valueOf(AjanCutParam.Plasma.ArcVoltage+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.))+"/"+String.format("%000.0f",AjanCutParam.Plasma.ArcVoltage));
//if(AjanPortInOld.ShieldPressureR!=AjanPortIn.ShieldPressureR||AjanPortInOld.ShieldPressureL!=AjanPortIn.ShieldPressureL)ShieldPressureIndicator.setText("<html>"+String.valueOf( ((int)(100*AjanPortIn.ShieldPressureR*10./255.))/100.)+"/"+String.valueOf( ((int)(100*AjanPortIn.ShieldPressureL*10./255.))/100.)+"/"+String.valueOf(AjanCutParam.Plasma.CutShieldPressure)+"</html>");
if(AjanPortInOld.ShieldPressureR!=AjanPortIn.ShieldPressureR)ShieldPressureIndicator.setText("<html>"+String.format("%.2f", ((int)(100*AjanPortIn.ShieldPressureR*10./255.))/100.)+"/"+String.format("%.2f",AjanCutParam.Plasma.CutShieldPressure)+"</html>");
if(AjanPortInOld.PlasmaPressureR!=AjanPortIn.PlasmaPressureR)PlasmaPressureIndicator.setText("<html>"+String.format("%.2f", ((int)(100*AjanPortIn.PlasmaPressureR*10./255.))/100.)+"/"+String.format("%.2f",AjanCutParam.Plasma.CutPlasmaPressure)+"</html>");
//if(AjanPortInOld.PlasmaPressureR!=AjanPortIn.PlasmaPressureR||AjanPortInOld.PlasmaPressureL!=AjanPortIn.PlasmaPressureL)PlasmaPressureIndicator.setText("<html>"+String.valueOf( ((int)(100*AjanPortIn.PlasmaPressureR*10./255.))/100.)+"/"+String.valueOf( ((int)(100*AjanPortIn.PlasmaPressureL*10./255.))/100.)+"/"+String.valueOf(AjanCutParam.Plasma.CutPlasmaPressure)+"</html>");
    
//PlasmaPressureIndicator.setText(String.valueOf( AjanPortIn.SetPlasmaPressure)+"ha"+String.valueOf(AjanPortIn.PlasmaPressureL));
//if(AjanPortInOld.ShieldPressureL!=AjanPortIn.ShieldPressureL)ShieldPressureIndicator.setText(String.valueOf( AjanPortIn.SetShieldPressure)+"ha"+String.valueOf(AjanPortIn.ShieldPressureL));

//Arrays.equals(hataliste1, hataliste);
//baglanti_SAYAC++;
//if(baglanti_SAYAC>1000&&baglanti_BASILDI==false){jLabel7.setText("Not Connected");baglanti_BASILDI=true;baglanti_OKEY=false;baglanti_SAYAC=1010;}
//CncFaults.setText("");
    
        //CncFaults.setListData(new String[] {"-x lim","-f lim"});
        
        //int i=0;
        
        /*if(AjanPortInOld.stat.Elkont!=AjanPortIn.stat.Elkont){
        if(AjanPortIn.stat.Elkont){
        
    AjanPortOut.HANDCONTR=true;
        AjanPortOut.F1=false;
AjanPortOut.RESUME=false;
    HandControl.setSelected(true);
    ShowElkontFrame();
        }
        }*/
if(AjanPortIn.lim!=AjanPortInOld.lim
        ||AjanPortIn.ihs!=AjanPortInOld.ihs||AjanPortIn.lms!=AjanPortInOld.lms||
        AjanPortIn.ani.PowerOff!=AjanPortInOld.ani.PowerOff||AjanPortIn.ani.Pause!=AjanPortInOld.ani.Pause){
   if(AjanPortIn.fault(0)==true){
       HataPenceresi.CncFaults.setBackground(Color.orange);
  
  HataPenceresi.CncFaults.setForeground(Color.RED);}

if(AjanPortIn.ani.Pause==false) {hataliste[i]="PAUSE";i++;}
if(AjanPortIn.ani.PowerOff==true){hataliste[i]="POWER OFF";i++;}
if(AjanPortIn.drv.XOk==false){hataliste[i]="X Driver Fault";i++;}
if(AjanPortIn.drv.YOk==false){hataliste[i]="Y Driver Fault";i++;}
if(AjanPortIn.drv.ZOk==false){hataliste[i]="C Driver Fault";i++;}
if(AjanPortIn.drv.UOk==false){hataliste[i]="A Driver Fault";i++;}
if(AjanPortIn.drv.TLOk==false){hataliste[i]="TL Driver Fault";i++;}
if(AjanPortIn.drv.TROk==false){hataliste[i]="TR Driver Fault";i++;}
if(AjanPortIn.drv.TVOk==false){hataliste[i]="TV Driver Fault";i++;}
if(AjanPortIn.drv.TWOk==false){hataliste[i]="TW Driver Fault";i++;}
if(AjanPortIn.lim.artiXLim==false){hataliste[i]="+ XLimit";i++;}
else if(AjanPortIn.lim.eksiXLim==false){hataliste[i]="- XLimit";i++;}
if(AjanPortIn.lim.artiYLim==false){hataliste[i]="+ YLimit";i++;}
else if(AjanPortIn.lim.eksiYLim==false){hataliste[i]="- YLimit";i++;}
if(AjanPortIn.lim.artiTLLim==false){hataliste[i]="+ TLLimit";i++;}
else if(AjanPortIn.lim.eksiTLLim==false){hataliste[i]="- TLLimit";i++;}
if(AjanPortIn.lim.artiTRLim==false){hataliste[i]="+ TRLimit";i++;}
else if(AjanPortIn.lim.eksiTRLim==false){hataliste[i]="- TRLimit";i++;}
if(AjanPortIn.ihs.CARPMATL==false){hataliste[i]="TL Torch Crashed";i++;}
if(AjanPortIn.ihs.CARPMATR==false){hataliste[i]="TR Torch Crashed";i++;}
if(AjanPortIn.ihs.IHSTL==false){hataliste[i]="TL Torch Contact";i++;}
if(AjanPortIn.ihs.IHSTR==false){hataliste[i]="TR Torch Contact";i++;}
if(AjanPortIn.ihs.IHSTV==false){hataliste[i]="TV Torch Contact";i++;}
if((AjanPortIn.ihs.IHSTW==false)){hataliste[i]="TW Torch Contact";i++;}
//if(AjanPortIn.ihs.OKMVTL==false);//ihs
//if(AjanPortIn.ihs.OKMVTR==false);//ihs
if(AjanPortIn.lms.CARPMATV==false){hataliste[i]="TV Torch Crashed";i++;}
if(AjanPortIn.lms.CARPMATW==false){hataliste[i]="TW Torch Crashed";i++;}
//if(AjanPortIn.lms.OKMVTV==false);
//if(AjanPortIn.lms.OKMVTW==false);
     if(AjanPortIn.lms.artiTvLim==false){hataliste[i]="+ TVLimit";i++;}
else if(AjanPortIn.lms.eksiTvLim==false){hataliste[i]="- TVLimit";i++;}
     if(AjanPortIn.lms.artiTwLim==false){hataliste[i]="+ TWLimit";i++;}
else if(AjanPortIn.lms.eksiTwLim==false){hataliste[i]="- TWLimit";i++;}

     if(AjanPortIn.fault(0)==false){
   HataPenceresi.CncFaults.setBackground(BackColor);
   HataPenceresi.CncFaults.setForeground(TxtColor);
                                    }
}else if(AjanPortIn.fault(0)==false){
   HataPenceresi.CncFaults.setBackground(BackColor);
   HataPenceresi.CncFaults.setForeground(TxtColor);
                                    }
 if((AjanPortIn.ani.Pause==false)&&(AjanPortInOld.ani.Pause==true))  
    lay1.drawImage(Pause, -centerX/2, -centerY/2, this);
 else if((AjanPortIn.ani.Pause==true)&&(AjanPortInOld.ani.Pause==false))
     canvas.repaint();
{

if((AjanPortInOld.ani.Pause))
    //RefreshPanel();
//else 
{
 //lay1.drawLine(0,centerY/2,0,-centerY/2);
 //lay1.drawLine(centerX/2,0,-centerX/2,0);
//CoordinateAxisRefresh(Color.gray);
    if(((vertex.get(vertex.size()-1).x)!=posxb
          ||(vertex.get(vertex.size()-1).y)!=posyb)){
if(canvas.isEnabled()){
//
lay1.setStroke(new BasicStroke(3));
lay1.draw(new Line2D.Double(CX+((posxb)*Scale),CY-((posyb)*Scale),CX+((vertex.get(vertex.size()-1).x)*Scale),CY-((vertex.get(vertex.size()-1).y)*Scale)));
lay1.setStroke(new BasicStroke(1));
posxb=(long)vertex.get(vertex.size()-1).x;
posyb=(long)vertex.get(vertex.size()-1).y;
posxIndicator.setText(String.valueOf( posxb/100.));
posYIndicator.setText(String.valueOf( posyb/100.));
//FeedRateIndicator.setText(String.valueOf( AjanPortIn.OverRideF));
//FeedRateIndicator.setText(String.valueOf( ((int)(100.*AjanPortIn.OverRideF*AjanCutParam.Plasma.CuttingSpeed/255.))/100.));
FeedRateIndicator.setText(String.valueOf((int)(AjanPortIn.OverRideF*AjanCutParam.Plasma.CuttingSpeed/100.)));

 //ArcVoltageIndicator.setText(String.valueOf(AjanCutParam.Plasma.ArcVoltage+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.)));
ArcVoltageIndicator.setText(String.format("%03d",AjanPortIn.ArcVoltageR+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.))+" / "+String.format("%03d",AjanCutParam.Plasma.ArcVoltage));
CutHeightIndicator.setText(String.valueOf(AjanCutParam.Plasma.TorchToWorkDistance));
    
PierceTimeIndicator.setText(String.valueOf(AjanCutParam.Plasma.PierceDelayTime));
//PlasmaPressureIndicator.get
//CutPrmInit.Purge=true
if(AjanPortIn.stat.PurgeOk) if(AjanPortIn.PlasmaPressureL<0.01||AjanPortIn.PlasmaPressureR<0.01||AjanPortIn.ShieldPressureL<0.01||AjanPortIn.ShieldPressureR<0.01)
            AjanPortIn.ShieldPressureR=0;

}
    }


}    
}
/*if((AjanPortIn.lim!=AjanPortInBef.lim)||
        (AjanPortIn.ani.Pause!=AjanPortInBef.ani.Pause)||
        (AjanPortIn.drv!=AjanPortInBef.drv)||
        (AjanPortIn.ihs!=AjanPortInBef.ihs)||
        (AjanPortIn.ani.PowerOff!=AjanPortInBef.ani.PowerOff)||
        (AjanPortIn.lms!=AjanPortInBef.lms)
        )*/
if(!Arrays.equals(hataliste1, hataliste))
{
   
 hatayiac=true;
   HataPenceresi.CncFaults.removeAll();
   HataPenceresi.CncFaults.setListData(hataliste);
   CncFaultsMain.removeAll();
   CncFaultsMain.setListData(hataliste);

}

}
AjanPortInOld=AjanPortIn;
hataliste1= hataliste;
if(i<1){

     HataPenceresi.setVisible(false);
HataPenceresi.formukapat();
//hatapenceresikapa();
//CncFaultsMain.setBackground(Color.WHITE);
jScrollPane1.setVisible(false);   
}
else {
    //HataPenceresi.setVisible(true);
    if(jScrollPane1.isVisible()==true){
    if(hataalarmsay>=0&&hataalarmsay<hataalarmsure){
        CncFaultsMain.setBackground(Color.RED);
        CncFaultsMain.setForeground(Color.WHITE);
    }
    else if(hataalarmsay>=hataalarmsure&&hataalarmsay<hataalarmsure*2){
        CncFaultsMain.setBackground(Color.WHITE);
        CncFaultsMain.setForeground(Color.RED);
    }
    else if(hataalarmsay>hataalarmsure*2) 
        hataalarmsay=0;
    hataalarmsay++;
    }
    //CncFaultsMain.setBackground(Color.WHITE);
    if(hatayiac==true){HataPenceresi.setVisible(true);
        HataPenceresi.formugoster(jScrollPane1.getX()-200,jScrollPane1.getY()+50,jScrollPane1.getWidth(),jScrollPane1.getHeight());
        jScrollPane1.setVisible(false);
        }else {/*CncFaultsMain.setBackground(Color.RED);*/jScrollPane1.setVisible(true);}

    }
 }
 
 

void CoordinateAxisRefresh(Color color){
     lay1.setColor(color);
lay1.drawLine(CX,0,CX,2*centerY);
//lay1.drawLine(centerX,100,centerX,0);
lay1.drawLine(0,CY,2*centerX,CY);
//lay1.drawLine(0,centerY/2,0,-centerY/2);
//lay1.drawLine(centerX/2,0,-centerX/2,0);
 }
 /*   public void RefreshPanel(){
Color Gc=lay1.getColor(); 
int i=0;
if(dxfVect.size()>0){
//DrawDxfEssi( Color.BLUE);
DrawDxfEssiVect(false);
}
if(AjanPortIn!=null&&!AjanPortIn.ani.Pause)
    lay1.drawImage(Pause, 0,0, this);
else{
   CoordinateAxisRefresh(Color.gray);
    if(((vertex.get(vertex.size()-1).x)!=posxb
          ||(vertex.get(vertex.size()-1).y)!=posyb)){
posxb=vertex.get(vertex.size()-1).x;
posyb=vertex.get(vertex.size()-1).y;
//RefreshPanel();    
if(canvas.isEnabled()){
posxIndicator.setText(String.valueOf( posxb/100.));
posYIndicator.setText(String.valueOf( posyb/100.));

}}
    if(vertex.size()>1)
for (i=0;i<vertex.size();i++)
    //lay1.draw(new Line2D.Double(CX+((vertex.get(i).x)*Scale),CY-((vertex.get(i).y)*Scale),CX+((vertex.get(i+1).x)*Scale),CY-((vertex.get(i+1).y)*Scale)));
                  // lay1.drawLine(CX+(int)((vertex.get(i).x/100.)*Scale),CY-(int)((vertex.get(i).y/100.)*Scale),CX+(int)((vertex.get(i+1).x/100.)*Scale),CY-(int)((vertex.get(i+1).y/100.)*Scale));
if(AjanPortIn!=null){
//FeedRateIndicator.setText(String.valueOf( AjanPortIn.OverRideF));
//FeedRateIndicator.setText(String.valueOf( ((int)(100.*AjanPortIn.OverRideF*AjanCutParam.Plasma.CuttingSpeed/255.))/100.));
FeedRateIndicator.setText(String.valueOf((int)(AjanPortIn.OverRideF*AjanCutParam.Plasma.CuttingSpeed/100.)));
//ArcVoltageIndicator.setText(String.valueOf( AjanPortIn.OverRideV));
// ArcVoltageIndicator.setText(String.valueOf(AjanCutParam.Plasma.ArcVoltage+50* (AjanPortIn.OverRideV)-255/2.));
  ArcVoltageIndicator.setText(String.valueOf(AjanCutParam.Plasma.ArcVoltage+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.)));
PierceTimeIndicator.setText(String.valueOf(AjanCutParam.Plasma.PierceDelayTime));
CutHeightIndicator.setText(String.valueOf(AjanCutParam.Plasma.TorchToWorkDistance));
posTRIndicator.setText(String.valueOf(AjanPortIn.PosTR));
posTLIndicator.setText(String.valueOf(AjanPortIn.PosTL));
//ShieldPressureIndicator.setText("<html>"+String.valueOf( ((int)(100*AjanPortIn.ShieldPressureR*10./255.))/100.)+"/"+String.valueOf( ((int)(100*AjanPortIn.ShieldPressureL*10./255.))/100.)+"/"+String.valueOf(AjanCutParam.Plasma.CutShieldPressure)+"</html>");
//PlasmaPressureIndicator.setText("<html>"+String.valueOf( ((int)(100*AjanPortIn.PlasmaPressureR*10./255.))/100.)+"/"+String.valueOf( ((int)(100*AjanPortIn.PlasmaPressureL*10./255.))/100.)+"/"+String.valueOf(AjanCutParam.Plasma.CutPlasmaPressure)+"</html>");
    // if(AjanPortIn.stat.PurgeOk) if(AjanPortIn.PlasmaPressureL<0.01||AjanPortIn.PlasmaPressureR<0.01||AjanPortIn.ShieldPressureL<0.01||AjanPortIn.ShieldPressureR<0.01)
      //      AjanPortIn.ShieldPressureR=0;      
}
}

}*/
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//RefreshPanel();
canvas.repaint();
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    public void CheckTcpSock(){

//socket.
if(!socketTcp.isConnected())
      {

          JOptionPane.showMessageDialog(null, "Baglanti HatasÄ±");
      }
//socket.
}
    public void Checksock(){


if(!socket.isConnected())
      {

          JOptionPane.showMessageDialog(null, "Baglanti HatasÄ±");
      }
//socket.
}
    public void initTcpSock() throws IOException{

        try {
    
         //socketTcp=new Socket("192.168.1.111",9855);    
         socketTcp=new Socket("192.168.21.22",9855);    
        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }catch(Exception e){

          JOptionPane.showMessageDialog(null, "Port HatasÄ±");
      }

        try {
            out = new PrintWriter(socketTcp.getOutputStream(), true);
     in = new BufferedReader(
                        new InputStreamReader(socketTcp.getInputStream()));       
              
            
      
        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }      

}
    
 
    
    public void initsock() throws IOException{
try
      {
       socket=new DatagramSocket(9876);
       socket.setSoTimeout(1000);
//socket.isConnected();
      } catch(Exception e){
          JOptionPane.showMessageDialog(null, "Port HatasÄ±");
      }


}
    

 public class MyCanvas extends java.awt.Canvas {

      public MyCanvas () {
         setBackground (Color.GRAY);
     
         //setSize(300, 300);
      }
      
   
      public void paint (Graphics g) {
          
          Graphics2D g2;
         g2 = (Graphics2D) g;
         //lay1.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
         //g2.drawString ("It is a custom canvas area", 70, 70);
           CoordinateAxisRefresh(Color.gray);
           DrawDxfEssiOff( Color.RED);DrawDxfEssi(Color.BLUE);
           if((AjanPortIn.ani.Pause==false))  
    lay1.drawImage(Pause, -centerX/2, -centerY/2, this);
      }
   }
      public void DrawDxfEssi(Color color){
      //if(color==canvas.getBackground())        CoordinateAxisRefresh(color);        else CoordinateAxisRefresh(Color.gray);  
        lay1.setColor(color);
        for(int i=0;i<dxfVect.size();i++){
              if(dxfVect.get(i).oge.atrib<=-10) 
                  while(((i+1)<dxfVect.size())&&dxfVect.get(i).oge.atrib==dxfVect.get(i+1).oge.atrib){
                      drawEntity(dxfVect.get(i).oge);
                      i++;}
               drawEntity(dxfVect.get(i).oge);
                }}

public void DrawDxfEssiOff(Color color){
      if(color==this.getBackground())
        CoordinateAxisRefresh(color);  
      else CoordinateAxisRefresh(Color.gray);  
        lay1.setColor(color);
        for(int i=0;i<dxfVectWithOff.size();i++){
              if(dxfVectWithOff.get(i).oge.atrib<=-10) 
                  while(((i+1)<dxfVectWithOff.size())&&dxfVectWithOff.get(i).oge.atrib==dxfVectWithOff.get(i+1).oge.atrib){
                      drawEntity(dxfVectWithOff.get(i).oge);
                      i++;}
               drawEntity(dxfVectWithOff.get(i).oge);
                }

    }
    private void actived(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_actived
//RefreshPanel();
   
        // TODO add your handling code here:
    }//GEN-LAST:event_actived
public byte[] ToByteArray(int value) {
     byte[] b={
        (byte) (value >> 24),
        (byte) (value >> 16),
        (byte) (value >> 8),
        (byte) value
    };
     
return  new byte []{b[3],b[2],b[1],b[0]};
}public byte[] ToByteArray(short value) {
     byte[] b={
       // (byte) (value >> 24),
        //(byte) (value >> 16),
        (byte) (value >> 8),
        (byte) value
    };
     
return  new byte []{b[1],b[0]};
}
public byte[] ToByteArray(float val) {
    int value = Float.floatToIntBits(val);//.doubleToLongBits(val);
     byte[] b={
        (byte) (value >> 24),
        (byte) (value >> 16),
        (byte) (value >> 8),
        (byte) value
    };
     
return  new byte []{b[3],b[2],b[1],b[0]};
}
    public byte[] ToByteArray(long value) {
    byte[] b={
        (byte) (value >> 56),
        (byte) (value >> 48),
        (byte) (value >> 40),
        (byte) (value >> 32),
        (byte) (value >> 24),
        (byte) (value >> 16),
        (byte) (value >> 8),
        (byte) value

    
    };
return  new byte []{b[7],b[6],b[5],b[4],b[3],b[2],b[1],b[0]};
    }
    public byte[] ToByteArray(double val) {
    long value = Double.doubleToLongBits(val);
        byte[] b={
        (byte) (value >> 56),
        (byte) (value >> 48),
        (byte) (value >> 40),
        (byte) (value >> 32),
        (byte) (value >> 24),
        (byte) (value >> 16),
        (byte) (value >> 8),
        (byte) value
       };
return  new byte []{b[7],b[6],b[5],b[4],b[3],b[2],b[1],b[0]};
    }
    private byte[] convertToBytes(Object object) throws IOException {
    try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
         ObjectOutputStream out1 = new ObjectOutputStream(bos)) {
        out1.writeObject(object);
        return bos.toByteArray();
    } 
    }
public static float reverse(float x) {
ByteBuffer bbuf=ByteBuffer.allocate(8);
bbuf.order(ByteOrder.BIG_ENDIAN);
bbuf.putFloat(x);
bbuf.order(ByteOrder.LITTLE_ENDIAN);
return  x;//bbuf.getDouble(0);
}
    public static double reverse(double x) {
ByteBuffer bbuf=ByteBuffer.allocate(8);
bbuf.order(ByteOrder.BIG_ENDIAN);
bbuf.putDouble(x);
bbuf.order(ByteOrder.LITTLE_ENDIAN);
return  x;//bbuf.getDouble(0);
}
public static int reverse(int x) {
ByteBuffer bbuf=ByteBuffer.allocate(8);
bbuf.order(ByteOrder.BIG_ENDIAN);
bbuf.putInt(x);
bbuf.order(ByteOrder.LITTLE_ENDIAN);
return x;// bbuf.getInt(0);
}public static short reverse(short x) {
ByteBuffer bbuf=ByteBuffer.allocate(8);
bbuf.order(ByteOrder.BIG_ENDIAN);
bbuf.putInt(x);
bbuf.order(ByteOrder.LITTLE_ENDIAN);
return x;// bbuf.getInt(0);
}
    public byte[] ObjectSend(Object obj) throws IOException{
        ///essivariable ts=new essivariable();
          //den ts=new den();
        /*ts.a1=-100;
        ts.a2=200;
        ts.a3=-12903.24;
        ts.a1=reverse(ts.a1);
        ts.a2=reverse(ts.a2);
        ts.a3=reverse(ts.a3);*/
       // ts.a3=199;
      // ts.t.a1=4;
       //ts.t.a2=4;
      /* ts.A400Flag=true;
       ts.IlaveFlag=true;
       ts.LeadOutFlag=true;
       ts.SmallHole=true;*/
      //  byte[] classBytes=convertToBytes(obj.getClass());
        //obj.getClass().getClassLoader();
        //byte[] classBytes1=convertToBytes(ts.t.getClass());
        byte[] ObjToBytes=convertToBytes(obj);
       // classBytes.length
               ObjToBytes=Arrays.copyOfRange(ObjToBytes,ObjToBytes.length-201,ObjToBytes.length);
         
        
   return ObjToBytes;     
        
    
    }
    int bag=0,oldbag=-1;//,basladi=0;
    boolean baglanti_OKEY=false;
//    boolean baglanti_BASILDI=false;    boolean baglanti_OKEY=false;
    boolean baglanti_BASILDI=false;
    int baglanti_SAYAC=-1;//boolean ProjePenceresikapa=false;int abc=0;
    
    /**
     *
     */
    public void CheckAutoZero(){
    
    if(AjanPortIn.stat.AutoZero){
        AjanPortOut.AUTOZ=false;
    if(AjanPortIn.stat.AutoZeroOk){
        if(AjanMachine.Torch.TL.enable){
                        if(AjanMachine.Torch.TL.G54){AjanMachine.G54.X=AjanPortIn.APosX;AjanMachine.G54.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TL.G55){AjanMachine.G55.X=AjanPortIn.APosX;AjanMachine.G55.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TL.G56){AjanMachine.G56.X=AjanPortIn.APosX;AjanMachine.G56.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TL.G57){AjanMachine.G57.X=AjanPortIn.APosX;AjanMachine.G57.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TL.G58){AjanMachine.G58.X=AjanPortIn.APosX;AjanMachine.G58.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TL.G59){AjanMachine.G59.X=AjanPortIn.APosX;AjanMachine.G59.Y=AjanPortIn.APosY;}
        }
      if(AjanMachine.Torch.TR.enable){
                        if(AjanMachine.Torch.TR.G54){AjanMachine.G54.X=AjanPortIn.APosX;AjanMachine.G54.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TR.G55){AjanMachine.G55.X=AjanPortIn.APosX;AjanMachine.G55.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TR.G56){AjanMachine.G56.X=AjanPortIn.APosX;AjanMachine.G56.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TR.G57){AjanMachine.G57.X=AjanPortIn.APosX;AjanMachine.G57.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TR.G58){AjanMachine.G58.X=AjanPortIn.APosX;AjanMachine.G58.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TR.G59){AjanMachine.G59.X=AjanPortIn.APosX;AjanMachine.G59.Y=AjanPortIn.APosY;}
        }

        if(AjanMachine.Torch.TV.enable){
                        if(AjanMachine.Torch.TV.G54){AjanMachine.G54.X=AjanPortIn.APosX;AjanMachine.G54.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TV.G55){AjanMachine.G55.X=AjanPortIn.APosX;AjanMachine.G55.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TV.G56){AjanMachine.G56.X=AjanPortIn.APosX;AjanMachine.G56.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TV.G57){AjanMachine.G57.X=AjanPortIn.APosX;AjanMachine.G57.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TV.G58){AjanMachine.G58.X=AjanPortIn.APosX;AjanMachine.G58.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TV.G59){AjanMachine.G59.X=AjanPortIn.APosX;AjanMachine.G59.Y=AjanPortIn.APosY;}
        }
      if(AjanMachine.Torch.TW.enable){
                        if(AjanMachine.Torch.TW.G54){AjanMachine.G54.X=AjanPortIn.APosX;AjanMachine.G54.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TW.G55){AjanMachine.G55.X=AjanPortIn.APosX;AjanMachine.G55.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TW.G56){AjanMachine.G56.X=AjanPortIn.APosX;AjanMachine.G56.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TW.G57){AjanMachine.G57.X=AjanPortIn.APosX;AjanMachine.G57.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TW.G58){AjanMachine.G58.X=AjanPortIn.APosX;AjanMachine.G58.Y=AjanPortIn.APosY;}
                  else  if(AjanMachine.Torch.TW.G59){AjanMachine.G59.X=AjanPortIn.APosX;AjanMachine.G59.Y=AjanPortIn.APosY;}
        }


    }
    }}
    public void SendCncPrmDatasW_Tcp(int size) throws SocketException, IOException{
            AjanChart.UpdatePrmInits();         
           socketTcp.setSendBufferSize(816);//
            socketTcp.setTcpNoDelay(true);
            socketTcp.setOOBInline(true);
             byte[] ara=PrmsToCnc(size); //new byte[]{'S','D',ToByteArray(hsp.size())[0],ToByteArray(hsp.size())[1],ToByteArray(hsp.size())[2],ToByteArray(hsp.size())[3],0,13};
            socketTcp.getOutputStream().write(ara);  
        
    }
    public void SendCncMicroJointW_Tcp() throws SocketException, IOException, InterruptedException{
 if(Graph.MJoint.size()>=1){
        //AjanChart.UpdatePrmInits();         
           socketTcp.setSendBufferSize(2024);
           socketTcp.setTcpNoDelay(true);
            socketTcp.setOOBInline(true);int Index=0;
    byte ch;byte[] ara1 =new byte[4];
int inttemp=0,j=0,SendIndx=0,SendSay=0,k=0;
float floattemp=0;
ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
ch=77;outputStream.write(ch);
ch=68;outputStream.write(ch);
inttemp=reverse(Graph.MJoint.size());outputStream.write(ToByteArray(inttemp));
                 
for(j=0;j<Graph.MJoint.size();j++){ 
inttemp=reverse(j);outputStream.write(ToByteArray(inttemp));           
inttemp=reverse(Graph.MJoint.get(j).index);outputStream.write(ToByteArray(inttemp));
floattemp=reverse(Graph.MJoint.get(j).LengthToStart);outputStream.write(ToByteArray(floattemp));
SendIndx++;


if(j==Graph.MJoint.size()-1)SendIndx=100;
if(SendIndx==100){ 
    while(SendSay==k){
// SendIndx=0;
    socketTcp.getOutputStream().write(outputStream.toByteArray( )); 
  //outputStream.reset();
 //TimeUnit.MILLISECONDS.sleep(10);
  outputStream.close();
  outputStream = new ByteArrayOutputStream(); 
//SendSay++;
   if(socketTcp.isClosed())break;
if(in.ready())
                    try {
  
                    socketTcp.getInputStream().read(ara1);
    k= (int) AjanPortIn.convert(ara1[0], ara1[1], ara1[2], ara1[3]);
                    } catch (IOException ex) {
                        Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
                                             }
    
 
                    

}
if(k==(SendSay+1))SendSay=k;
SendIndx=0;
}
}
                    
                 socketTcp.getOutputStream().write(outputStream.toByteArray( )); 
                 
                  outputStream.close();
      //          
     }
    }
    SwingWorker<Integer, String> worker = new SwingWorker<Integer, String>() {
   //worker.
    @Override
      protected Integer doInBackground() throws Exception {
    // Simulate doing something useful.
long i=0;int bytes=0;byte [] receiveData=new byte[500];//byte [] SendData;
long sendl=10000L;
int cncdata=0;
int  InetSayac=0;
int gondersayac=0,tcpGonderSayac=50;
boolean PreFlow=false,CutFlow=false;
float PreShieldAverageR=0,PrePlasmaAverageR=0;
float PreShieldAverageL=0,PrePlasmaAverageL=0;
float CutShieldAverageR=0,CutPlasmaAverageR=0;
float CutShieldAverageL=0,CutPlasmaAverageL=0;
int PressureCount=0;
boolean PurgeOk=false,PurgeMode=false;
int PreFlowProgressCount=0,CutFlowProgressCount=0;
int Gas1=0,Gas2=0,Gas3=0;
boolean Gas1Err=false,Gas2Err=false,Gas3Err=false;
//boolean PrmGonder=false;
//final byte[] SendData ={1,2,3};// longToByteArray(132000);
DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);


       
byte[] SendData =AjanPortOut.boolToByte();//ToByteArray(11100.1234);
//long
//DatagramPacket SendPacket = new DatagramPacket(SendData, SendData.length);
DatagramPacket SendPacket = new DatagramPacket(SendData, SendData.length, IPAddress, AJAN_CNC_UDP_PORT);    
       boolean ReadyToRun=false;
       
while(true){
            

 bytes=0; 
 cncdata=0;


     if(baglanti_SAYAC==-1){
      baglanti_SAYAC=0;
              try{
            socket.receive(receivePacket);
           publish("3");
        }
        catch (IOException ex) {publish("2");Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);}
         
     }else{
        try{
            socket.receive(receivePacket);
          PAUSEButton.isSelected();
        }
        catch (IOException ex) {Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);}
     }
 
 InetSayac++;
if(InetSayac==1000)
{
     IPAddress = receivePacket.getAddress(); 
    AJAN_CNC_UDP_PORT=receivePacket.getPort();
    InetSayac=0;
}

gondersayac++;


if( gondersayac==10){
    tcpGonderSayac++;
gondersayac=0;
      // if(gondersayac==6) {gondersayac=0;PrmGonder=true;}
        if(!AjanPortOut.F1)
        {//&&sayactest<1000){
             try{
            socket.receive(receivePacket);
            bag=1;
            if(oldbag!=bag){publish("3");}
        }
        catch (IOException ex) {bag=0;if(bag!=oldbag){publish("2");}Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);}
           if((AjanPortOut.RESUME||AjanPortOut.BACKWARD||tcpGonderSayac>=3)&&AjanPortIn!=null&&!AjanPortIn.stat.AutoZero){
               AjanChart.UpdatePrmInits();         
              SendData=PrmsToCnc(0);
              tcpGonderSayac=0;
             }
           else SendData =AjanPortOut.boolToByte();//ToByteArray(11100.1234);
            
            SendPacket = new DatagramPacket(SendData, SendData.length, IPAddress, AJAN_CNC_UDP_PORT);  
            try {
            socket.send(SendPacket);            
                } catch (IOException ex) {
                    Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
                }
        }//if(!AjanPortOut.F1)
        else if(AjanPortIn!=null)
        {System.out.print("runstart\n"); 
            closeButtons();
            SendData =AjanPortOut.boolToByte();
          //  AjanChart.UpdatePrmInits();         
            //  SendData=PrmsToCnc(0);
            SendPacket = new DatagramPacket(SendData, SendData.length, IPAddress, AJAN_CNC_UDP_PORT);  
             try { socket.send(SendPacket); 
             initTcpSock();
             }
             catch (IOException ex) {
                 Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex); }
   System.out.print("inittcpok");       
             SendCncPrmDatasW_Tcp(hsp.size());
              System.out.print("sendprmdataok");   
           TimeUnit.MILLISECONDS.sleep(2);
        //    for(  int j=0;j<10000000;j++);
            int j=0;int k=0;

            j=0;
            byte[] ara1 =new byte[4];//=null;
            in = new BufferedReader(new InputStreamReader(socketTcp.getInputStream())); 
            int a=1;

            while(j<hsp.size())
            {
   
                if(socketTcp.isClosed())break;
                if(a>0) 
                {  
                    SendData=ConvertToCnc(hsp.get(j),j);
                    try {
                        socketTcp.getOutputStream().write(SendData);
                    } catch (IOException ex) {
                        Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
                                             }
                }
                
                if(in.ready())
                    try {
                    socketTcp.getInputStream().read(ara1);
                    k=(int) AjanPortIn.convert(ara1[0], ara1[1], ara1[2], ara1[3]);
                    } catch (IOException ex) {
                        Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
                                             }
    
 
                    if(k==(j+1))j=k;

            }
 System.out.print("senddataok");   
     SendCncMicroJointW_Tcp();
      System.out.print("sendmicrodataok");  
     Job.ResumeEnable=true;
     socketTcp.close();
     System.out.print("closetcpok");  
            RUNButton.setSelected(false);
            ReadyToRun=false;
            AjanPortOut.F1=false;
            AjanPortOut.RESUME=false;
            AjanPortOut.BACKWARD=false;
             System.out.print("runok\n");  
        }//else if(AjanPortIn!=null)
}

AjanPortByte=new byte[500];
AjanPortByte=receivePacket.getData();
String modifiedSentence = new String(receivePacket.getData());
 
bytes=receivePacket.getLength();
AjanPortBytes=modifiedSentence.toCharArray();       
if((bytes>0)&&AjanPortBytes[0]=='d'&&AjanPortBytes[1]=='s'){    cncdata=1;}
else if((bytes>0)&&AjanPortBytes[1]=='t'&&AjanPortBytes[0]=='s'){
            vertex.clear();
            vertex.add(new Contour(0,0));
            posxb=0;
            posyb=0;
            cncdata=0;
                                                                }

   if((cncdata)==1&&(bytes==74))
   {
     AjanPortIn=new InfromCnc(AjanPortByte, 0, bytes,AjanPortIn);  
     //jLabel7.setText("Connected");
     //if(AjanPortIn.fault(0)==true)    CncFaults.setBackground(Color.orange);
     // CheckAutoZero(); 
     if(AjanPortIn.stat.Abort){
         ajanframe.AjanPortOut.HANDCONTR=false;
    elkfrm.show(false); 
     }
     if(AjanPortInBef!=null){
        if(AjanPortInBef.stat.RUN!=AjanPortIn.stat.RUN||!RUNButton.isEnabled()&&!AjanPortIn.stat.RUN){
            if(AjanPortInBef.stat.RUN&&!AjanPortIn.stat.RUN){
         AjanPortOut.RESUME=false;
         AjanPortOut.BACKWARD=false;
int ResumeTemp=0,j=0;
 ArcLen ALength= new ArcLen();
for( j=0;j<=Job.ResumeIndex;j++){
        if(j==Job.ResumeIndex){ALength=hsp.get(j).Hm.oge.GetLen(Job.Resposx,Job.Resposy); 
        if(ALength.Lenght==0){if((j+1)<hsp.size())Job.ResumeIndex++;
        
        }
        }
    else ALength=hsp.get(j).Hm.oge.GetLen(0); 
ResumeTemp+=ALength.Lenght;
}
Job.kalan_temp=hsp.get(0).ana_temp-ResumeTemp;
}//else Job.kalan_temp=ana_temp;   
//            }      
            if(AjanPortIn.stat.RUN)closeButtons();else openButtons();}
        if(AjanPortIn.stat.AutoZeroOk&&!AjanPortInBef.stat.AutoZeroOk){
        Job.PlateToXAxisAngle=(float) ((AjanPortIn.VectorIndex)/100000.);
        }
        if(AjanPortInBef.PosTR!=AjanPortIn.PosTR)   
        posTRIndicator.setText(String.valueOf(AjanPortIn.PosTR/250.));
if(AjanPortInBef.PosTL!=AjanPortIn.PosTL)
        posTLIndicator.setText(String.valueOf(AjanPortIn.PosTL/250.));
         if(AjanPortInBef.OverRideF!=AjanPortIn.OverRideF){
          FeedRateIndicator.setText(String.valueOf((int)(AjanPortIn.OverRideF*AjanCutParam.Plasma.CuttingSpeed/100.)));}
        if(AjanPortInBef.OverRideV!=AjanPortIn.OverRideV){
          //ArcVoltageIndicator.setText(String.valueOf(AjanCutParam.Plasma.ArcVoltage+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.)));
          ArcVoltageIndicator.setText(String.format("%03d",AjanPortIn.ArcVoltageR+(int)(50* ((AjanPortIn.OverRideV)-255/2.)/127.))+" / "+String.format("%03d",AjanCutParam.Plasma.ArcVoltage));
                                                       }
       if(AjanPortInBef.ShieldPressureL!=AjanPortIn.ShieldPressureL||AjanPortInBef.ShieldPressureR!=AjanPortIn.ShieldPressureR){
        //ShieldPressureIndicator.setText("<html>"+String.valueOf( ((int)(100*AjanPortIn.ShieldPressureR*10./255.))/100.)+"/"+String.valueOf( ((int)(100*AjanPortIn.ShieldPressureL*10./255.))/100.)+"/"+String.valueOf(AjanCutParam.Plasma.CutShieldPressure)+"</html>");
        if(AjanPortInOld.ShieldPressureR!=AjanPortIn.ShieldPressureR)ShieldPressureIndicator.setText("<html>"+String.format("%.2f", ((int)(100*AjanPortIn.ShieldPressureR*10./255.))/100.)+"/"+String.format("%.2f",AjanCutParam.Plasma.CutShieldPressure)+"</html>");
                                                       }
   if(AjanPortInBef.PlasmaPressureL!=AjanPortIn.PlasmaPressureL||AjanPortInBef.PlasmaPressureR!=AjanPortIn.PlasmaPressureR){
          //PlasmaPressureIndicator.setText("<html>"+String.valueOf( ((int)(100*AjanPortIn.PlasmaPressureR*10./255.))/100.)+"/"+String.valueOf( ((int)(100*AjanPortIn.PlasmaPressureL*10./255.))/100.)+"/"+String.valueOf(AjanCutParam.Plasma.CutPlasmaPressure)+"</html>");
          if(AjanPortInOld.PlasmaPressureR!=AjanPortIn.PlasmaPressureR)PlasmaPressureIndicator.setText("<html>"+String.format("%.2f", ((int)(100*AjanPortIn.PlasmaPressureR*10./255.))/100.)+"/"+String.format("%.2f",AjanCutParam.Plasma.CutPlasmaPressure)+"</html>");
                                               }
if((AjanPortInBef.stat.CheckGenerator!=AjanPortIn.stat.CheckGenerator)&&AjanPortIn.stat.CheckGenerator){
JOptionPane.showMessageDialog(null,
    "Transfer Fault\n Check Generator",
    "Inane warning",
    JOptionPane.WARNING_MESSAGE);
   // JOptionPane.showMessageDialog(null, "Transfer Fault!!! Check Generator");
}



   if(AjanPortOut.PURGE&AjanPortIn.stat.PurgeOn) {
     
      PurgeMode=true;
 
  }
   
   if(PurgeMode){
       //ProgressCount++;
       if(AjanPortIn.stat.PurgeOn&&!PreFlow){
      PreFlow=true; PurgeOk=AjanPortIn.stat.PurgeOk;
      AjanChart.PurgingMenu.PreFlowProgress.setValue(PreFlowProgressCount);
   AjanChart.PurgingMenu.CutFlowProgress.setValue(CutFlowProgressCount);
   }
  
   else if(AjanPortIn.stat.PurgeOk&&PreFlow&&!CutFlow){
PreShieldAverageL+=AjanPortIn.ShieldPressureL;
PrePlasmaAverageL+=AjanPortIn.PlasmaPressureL;
PreShieldAverageR+=AjanPortIn.ShieldPressureR;
PrePlasmaAverageR+=AjanPortIn.PlasmaPressureR;
PressureCount++; 
  PurgeOk=AjanPortIn.stat.PurgeOk;
   }
   else if(!AjanPortIn.stat.PurgeOk&&PurgeOk&&PreFlow&&!CutFlow){
       PurgeOk=AjanPortIn.stat.PurgeOk;
   
PreShieldAverageL=(PreShieldAverageL/PressureCount)*10/255;
PrePlasmaAverageL=(PrePlasmaAverageL/PressureCount)*10/255;
PreShieldAverageR=(PreShieldAverageR/PressureCount)*10/255;
PrePlasmaAverageR=(PrePlasmaAverageR/PressureCount)*10/255;
String StrShield=AjanCutParam.Plasma.PreShieldGas;
String StrPlasma=AjanCutParam.Plasma.PreShieldGas;
if(AjanMachine.UseNitrogeneInPreflow)StrShield=StrPlasma="N2";
Gas1Err=Gas2Err=Gas3Err=false;     
AjanChart.PurgingMenu.PreShieldGasTLCheckBox.setSelected(false);
AjanChart.PurgingMenu.PreShieldGasTRCheckBox.setSelected(false);
AjanChart.PurgingMenu.PrePlasmaGasTLCheckBox.setSelected(false);
AjanChart.PurgingMenu.PrePlasmaGasTRCheckBox.setSelected(false);
      if(PreShieldAverageL<5.5){AjanChart.PurgingMenu.PreShieldGasTLCheckBox.setText(StrShield+" low");if(AjanMachine.Torch.TL.enable) Gas1Err=true; }   
else if(PreShieldAverageL>7.0){AjanChart.PurgingMenu.PreShieldGasTLCheckBox.setText(StrShield+" high"); if(AjanMachine.Torch.TL.enable)Gas1Err=true; }
else {                        AjanChart.PurgingMenu.PreShieldGasTLCheckBox.setText(StrShield+" Ok.");AjanChart.PurgingMenu.PreShieldGasTLCheckBox.setSelected(true);}
    if(PreShieldAverageR<5.5){AjanChart.PurgingMenu.PreShieldGasTRCheckBox.setText(StrShield+" low");if(AjanMachine.Torch.TR.enable)  Gas1Err=true; }
else if(PreShieldAverageR>7.0){AjanChart.PurgingMenu.PreShieldGasTRCheckBox.setText(StrShield+" high"); if(AjanMachine.Torch.TR.enable) Gas1Err=true; }
else {                        AjanChart.PurgingMenu.PreShieldGasTRCheckBox.setText(StrShield+" Ok");AjanChart.PurgingMenu.PreShieldGasTRCheckBox.setSelected(true);}
     if(PrePlasmaAverageL<5.5){AjanChart.PurgingMenu.PrePlasmaGasTLCheckBox.setText(StrPlasma+" low"); if(AjanMachine.Torch.TL.enable)Gas1Err=true; }
else if(PrePlasmaAverageL>7.0){AjanChart.PurgingMenu.PrePlasmaGasTLCheckBox.setText(StrPlasma+" high"); if(AjanMachine.Torch.TL.enable)Gas1Err=true; }
else {                        AjanChart.PurgingMenu.PrePlasmaGasTLCheckBox.setText(StrPlasma+" Ok");AjanChart.PurgingMenu.PrePlasmaGasTLCheckBox.setSelected(true);}
     if(PrePlasmaAverageR<5.5){AjanChart.PurgingMenu.PrePlasmaGasTRCheckBox.setText(StrPlasma+" low");if(AjanMachine.Torch.TR.enable) Gas1Err=true; }
else if(PrePlasmaAverageR>7.0){AjanChart.PurgingMenu.PrePlasmaGasTRCheckBox.setText(StrPlasma+" high"); if(AjanMachine.Torch.TR.enable) Gas1Err=true; }
else {                        AjanChart.PurgingMenu.PrePlasmaGasTRCheckBox.setText(StrPlasma+" Ok"); AjanChart.PurgingMenu.PrePlasmaGasTRCheckBox.setSelected(true);}
                        if(Gas1Err)AjanChart.PurgingMenu.PurgeErrorGas1.setText("Check "+StrShield+" Gas Line and Regulator");
PressureCount=0;CutFlow=true;
   
   }
   else if(AjanPortIn.stat.PurgeOk&AjanPortIn.stat.PurgeOn&&PreFlow&&CutFlow){
       PurgeOk=AjanPortIn.stat.PurgeOk;
CutShieldAverageL+=AjanPortIn.ShieldPressureL;
CutPlasmaAverageL+=AjanPortIn.PlasmaPressureL;
CutShieldAverageR+=AjanPortIn.ShieldPressureR;
CutPlasmaAverageR+=AjanPortIn.PlasmaPressureR;
  PressureCount++; 
   } else if(!AjanPortIn.stat.PurgeOn&&PreFlow){
      if( CutFlow){ PurgeMode=false;
      AjanChart.PurgingMenu.PreFlowProgress.setValue(PreFlowProgressCount);
   AjanChart.PurgingMenu.CutFlowProgress.setValue(CutFlowProgressCount);
   PreFlowProgressCount=0;CutFlowProgressCount=0;
      
CutShieldAverageL=(CutShieldAverageL/PressureCount)*10/255;
CutPlasmaAverageL=(CutPlasmaAverageL/PressureCount)*10/255;
CutShieldAverageR=(CutShieldAverageR/PressureCount)*10/255;
CutPlasmaAverageR=(CutPlasmaAverageR/PressureCount)*10/255;
Gas1Err=Gas2Err=Gas3Err=false;  
AjanChart.PurgingMenu.CutShieldGasTLCheckBox.setSelected(false);
AjanChart.PurgingMenu.CutShieldGasTRCheckBox.setSelected(false);
AjanChart.PurgingMenu.CutPlasmaGasTLCheckBox.setSelected(false);
AjanChart.PurgingMenu.CutPlasmaGasTRCheckBox.setSelected(false);
     if(CutShieldAverageL<5.5){AjanChart.PurgingMenu.CutShieldGasTLCheckBox.setText(AjanCutParam.Plasma.CutShieldGas+" low");if(AjanMachine.Torch.TL.enable) Gas2Err=true; }    
else if(CutShieldAverageL>7.0){AjanChart.PurgingMenu.CutShieldGasTLCheckBox.setText(AjanCutParam.Plasma.CutShieldGas+" high");if(AjanMachine.Torch.TL.enable)Gas2Err=true; }
else {                        AjanChart.PurgingMenu.CutShieldGasTLCheckBox.setText(AjanCutParam.Plasma.CutShieldGas+" Ok.");AjanChart.PurgingMenu.CutShieldGasTLCheckBox.setSelected(true);}
   
     if(CutShieldAverageR<5.5){AjanChart.PurgingMenu.CutShieldGasTRCheckBox.setText(AjanCutParam.Plasma.CutShieldGas+" low");if(AjanMachine.Torch.TR.enable) Gas2Err=true; }
else if(CutShieldAverageR>7.0){AjanChart.PurgingMenu.CutShieldGasTRCheckBox.setText(AjanCutParam.Plasma.CutShieldGas+" high");if(AjanMachine.Torch.TR.enable) Gas2Err=true; }
else {                        AjanChart.PurgingMenu.CutShieldGasTRCheckBox.setText(AjanCutParam.Plasma.CutShieldGas+" Ok");AjanChart.PurgingMenu.CutShieldGasTRCheckBox.setSelected(true);}

     if(CutPlasmaAverageL<5.5){AjanChart.PurgingMenu.CutPlasmaGasTLCheckBox.setText(AjanCutParam.Plasma.CutPlasmaGas+" low");if(AjanMachine.Torch.TL.enable)Gas3Err=true; }
else if(CutPlasmaAverageL>7.0){AjanChart.PurgingMenu.CutPlasmaGasTLCheckBox.setText(AjanCutParam.Plasma.CutPlasmaGas+" high");if(AjanMachine.Torch.TL.enable)Gas3Err=true; }
else {                        AjanChart.PurgingMenu.CutPlasmaGasTLCheckBox.setText(AjanCutParam.Plasma.CutPlasmaGas+" Ok");AjanChart.PurgingMenu.CutPlasmaGasTLCheckBox.setSelected(true);}
     if(CutPlasmaAverageR<5.5){AjanChart.PurgingMenu.CutPlasmaGasTRCheckBox.setText(AjanCutParam.Plasma.CutPlasmaGas+" low");if(AjanMachine.Torch.TR.enable) Gas3Err=true; }
else if(CutPlasmaAverageR>7.0){AjanChart.PurgingMenu.CutPlasmaGasTRCheckBox.setText(AjanCutParam.Plasma.CutPlasmaGas+" high");if(AjanMachine.Torch.TR.enable) Gas3Err=true; }
else {                        AjanChart.PurgingMenu.CutPlasmaGasTRCheckBox.setText(AjanCutParam.Plasma.CutPlasmaGas+" Ok"); AjanChart.PurgingMenu.CutPlasmaGasTRCheckBox.setSelected(true);}
        
   if(Gas2Err)AjanChart.PurgingMenu.PurgeErrorGas2.setText("Check "+AjanCutParam.Plasma.CutShieldGas+" Gas Line and Regulator");
  if(Gas3Err)AjanChart.PurgingMenu.PurgeErrorGas3.setText("Check "+AjanCutParam.Plasma.CutPlasmaGas+" Gas Line and Regulator");
//AjanChart.PurgeButton.setSelected(false);
          PressureCount=0;CutFlow=false;PreFlow=false;}   
   }
       /*if((!AjanPortIn.ero.KENO&!AjanPortIn.ero.PolArti&!AjanPortIn.ero.SES)){
           PurgeMode=false;}*/
   }
           
           else if(PreFlow||CutFlow){
  
               PreFlow=false;CutFlow=false;
               PressureCount=0;
PreShieldAverageL=0;PrePlasmaAverageL=0;
PreShieldAverageR=0;PrePlasmaAverageR=0;
                   }  
    if(AjanPortIn.stat.PurgeOn){
   if(PreFlow){PreFlowProgressCount++;
   AjanChart.PurgingMenu.PreFlowProgress.setValue(PreFlowProgressCount);}
   if(CutFlow){
   CutFlowProgressCount++;
   AjanChart.PurgingMenu.PreFlowProgress.setValue(PreFlowProgressCount);
   AjanChart.PurgingMenu.CutFlowProgress.setValue(CutFlowProgressCount);
   }
           }
     }//if(AjanPortInBef!=null){
        DrawContour();
        cncdata=0;
        publish("1");
        bytes=0;
   }//if((cncdata)==1&&(bytes==69))

 }//while(true){
 
}// protected Void doInBackground() throws Exception 
@Override
  protected void process(java.util.List<String> chunks) {
final byte[] SendData =AjanPortOut.boolToByte();//ToByteArray(11100.1234);
//long
//DatagramPacket SendPacket = new DatagramPacket(SendData, SendData.length);
if(chunks.get(0)=="2"){jPanel4.setBackground(Color.RED);bag=oldbag=0;closeButtons();}
else if(chunks.get(0)=="3"){jPanel4.setBackground(Color.GREEN);bag=oldbag=1;openButtons();}
else{

DatagramPacket SendPacket = new DatagramPacket(SendData, SendData.length, IPAddress, AJAN_CNC_UDP_PORT);    
        try {
            socket.send(SendPacket);
        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }
//      RefreshPanel();
ContourAdd();
  AjanPortInBef=AjanPortIn;
}
      
                          }
//worker.
  @Override      

protected void done() {
worker.execute();
//throw new RuntimeException("I want to produce a stack trace!");
                          }
  
};

public void openButtons(){
RUNButton.setEnabled(true);
//PAUSEButton.setEnabled(true);
RESUMEButton.setEnabled(true);
GoZeroButton.setEnabled(true);
MachineZeroButton.setEnabled(true);
HandControl.setEnabled(true);
}    

public void closeButtons(){
RUNButton.setEnabled(false);
//PAUSEButton.setEnabled(false);
//RESUMEButton.setEnabled(false);
GoZeroButton.setEnabled(false);
MachineZeroButton.setEnabled(false);
HandControl.setEnabled(false);

}    

/*
    SwingWorker<Integer, String> connect_check = new SwingWorker<Integer, String>() {
   //worker.
    @Override
      protected Integer doInBackground() throws Exception {
     while(true){
    if(baglanti_SAYAC>0 && baglanti_SAYAC<1100){

if (baglanti_SAYAC>1000)publish("ok");
baglanti_SAYAC++;
    }
     }
 
}// protected Void doInBackground() throws Exception 
@Override
  protected void process(java.util.List<String> chunks) {
    try{
     jPanel4.setBackground(Color.RED);baglanti_SAYAC=0;
     connect_check.execute();
    }catch(Exception ignore){}

                          }
    @Override      

protected void done() {
connect_check.execute();
                          }
};*/
    
            
    public void  runQueries() throws IOException{
    while(true)if (in.readLine()!=null) {
//        textField4.setText( in.readLine());
    }
    }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

CheckOpenInit();
        try {
            initsock();
                 //initTcpSock();

        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    //boolean acikmi=socket.isConnected();
    closeButtons();
    
     KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());
    
    
     worker.execute();
     //connect_check.execute();
    
    
     
 //RefreshPanel();
 /*
                File file = new File("C:\\Users\\ajanuser\\Documents\\tumproj");
        
            
            Deserializer deserializer = new Deserializer();
            gecerliproje=deserializer.deserialzeGecerliProje(file);
            gecerliproje.setdosyalistesi(ProjectFilesList);
            gecerliproje.listele();
            
            DrawDxfEssiVect(true);
            for(int i=0;i<gecerliproje.getkesimDosyasiSayisi();i++)
               {
                   if(i==0)//dxfVect=gecerliproje.getDxfVectorler(i);
                       dxfVect.addAll(gecerliproje.getDxfVectorler(i));
                   else
                           dxfVect.addAll(gecerliproje.getDxfVectorler(i));
               }
            DrawDxfEssiVect(false);  
     */
  //}    
         
//t.addActionListener(ali);
        //t.start();
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    StopDatabase();
       
        try { socket.close();
            socketTcp.close();
            /*try {
            // TODO add your handling code here:
            socket.close();
            } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
            }*/
        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    int sayactest=0;
    private void RUNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RUNButtonActionPerformed

       // vektortazele();
       //dxfVectWithOff=dxfVect;//CutEndObjNo=dxfVectWithOff.size();
if(dxfVectWithOff.size()>0 ){
AjanPortOut.BACKWARD=false;
AjanPortOut.RESUME=false;
//AjanPortOut.ABORT=false;
//RESUMEButton.setSelected(false);
ABORTButton.setSelected(false);
SoftAjanPort.ABORT=false;
AjanPortOut.ABORT=SoftAjanPort.ABORT||WirelessAjanPort.ABORT;
SoftAjanPort.PAUSE=false;
AjanPortOut.PAUSE=SoftAjanPort.PAUSE||WirelessAjanPort.PAUSE;
PAUSEButton.setSelected(AjanPortOut.PAUSE);
sayactest=0;
canvas.repaint();
ToCnc();
System.out.print("dataready\n"); 
AjanPortOut.F1=true;}
else RUNButton.setSelected(false);

    /*    try {
            // TODO add your handling code here:
//ToCnc();
ts=ObjectSend();
        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_RUNButtonActionPerformed

    private void RESUMEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RESUMEButtonActionPerformed
        if(dxfVectWithOff.size()>0 &&Job.ResumeEnable){
AjanPortOut.RESUME=true;
RUNButton.setSelected(false);
AjanPortOut.BACKWARD=false;
//AjanPortOut.ABORT=false;
//RESUMEButton.setSelected(false);
ABORTButton.setSelected(false);
SoftAjanPort.ABORT=false;
AjanPortOut.ABORT=SoftAjanPort.ABORT||WirelessAjanPort.ABORT;
SoftAjanPort.PAUSE=false;
AjanPortOut.PAUSE=SoftAjanPort.PAUSE||WirelessAjanPort.PAUSE;
PAUSEButton.setSelected(AjanPortOut.PAUSE);
sayactest=0;
canvas.repaint();
ToCnc();AjanPortOut.F1=true;
        }
else RUNButton.setSelected(false);
           
            
            
        
        
    }//GEN-LAST:event_RESUMEButtonActionPerformed

    private void PAUSEButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PAUSEButtonActionPerformed
        // TODO add your handling code here:


//PAUSEButton.setSelected(AjanPortOut.PAUSE);
        if(PAUSEButton.isSelected())SoftAjanPort.PAUSE=true;
else SoftAjanPort.PAUSE=false; 
AjanPortOut.PAUSE=SoftAjanPort.PAUSE||WirelessAjanPort.PAUSE;
AjanPortOut.F1=false;
AjanPortOut.RESUME=false;

//AjanPortOut.ABORT=false;
SoftAjanPort.ABORT=false;
AjanPortOut.ABORT=SoftAjanPort.ABORT||WirelessAjanPort.ABORT;

     //   setSelected(false);
  RUNButton.setSelected(false);
RESUMEButton.setSelected(false);
ABORTButton.setSelected(false);
  /*byte []SendData ;
        try {
            SendData =ObjectSend();
        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }*/

    }//GEN-LAST:event_PAUSEButtonActionPerformed

    private void jMenuBar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuBar1MouseClicked

    private void HandControlMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HandControlMouseReleased
        // TODO add your handling code here:
       // AjanPortOut.HANDCONTR=false;
      // HandControl.setSelected(false);
       
    }//GEN-LAST:event_HandControlMouseReleased

    private void HandControlMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HandControlMousePressed
        // TODO add your handling code here:
        
     //dim=Toolkit.getDefaultToolkit().getScreenSize();


//HandControl.setLocation(5, dim.height/2 - HandControl.getSize().height/2);
//HandControl.setModal(true);   

    AjanPortOut.HANDCONTR=true;
    AjanPortOut.F1=false;
    AjanPortOut.RESUME=false;
    AjanPortOut.BACKWARD=false;
    //HandControl.setSelected(true);
    ShowElkontFrame();
    }//GEN-LAST:event_HandControlMousePressed

    private void ABORTButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ABORTButtonMousePressed
        // TODO add your handling code here:
AjanPortOut.F1=false;
AjanPortOut.RESUME=false;
AjanPortOut.BACKWARD=false;
//AjanPortOut.PAUSE=false
SoftAjanPort.PAUSE=false;
AjanPortOut.PAUSE=SoftAjanPort.PAUSE||WirelessAjanPort.PAUSE;
//AjanPortOut.ABORT=true;
SoftAjanPort.ABORT=true;
AjanPortOut.ABORT=SoftAjanPort.ABORT||WirelessAjanPort.ABORT;
   RUNButton.setSelected(false);
RESUMEButton.setSelected(false);
PAUSEButton.setSelected(false);        
    }//GEN-LAST:event_ABORTButtonMousePressed

    private void ABORTButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ABORTButtonMouseReleased
        // TODO add your handling code here:
AjanPortOut.ABORT=false;
ABORTButton.setSelected(false);        
    }//GEN-LAST:event_ABORTButtonMouseReleased

    private void GoZeroButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoZeroButtonMousePressed
        // TODO add your handling code here:
        AjanPortOut.GOZERO=true;
        AjanPortOut.F1=false;
        AjanPortOut.AUTOZ=false;
        AjanPortOut.MSF=false;
        AjanPortOut.HANDCONTR=false;
        
        //GoZeroButton.setSelected(false);
    }//GEN-LAST:event_GoZeroButtonMousePressed

    private void GoZeroButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoZeroButtonMouseReleased
        // TODO add your handling code here:
        AjanPortOut.GOZERO=false;
        GoZeroButton.setSelected(false);
    }//GEN-LAST:event_GoZeroButtonMouseReleased

    private void MachineZeroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MachineZeroButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MachineZeroButtonActionPerformed

    private void GoZeroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoZeroButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GoZeroButtonActionPerformed

    private void ABORTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ABORTButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ABORTButtonActionPerformed

    private void HandControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HandControlActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_HandControlActionPerformed

    private void jMenu5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu5KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu5KeyPressed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
 // TODO add your handling code here:
 
  
 dim=Toolkit.getDefaultToolkit().getScreenSize();
AjanChart.setLocation(dim.width/2 - AjanChart.getSize().width/2 , dim.height/2 - AjanChart.getSize().height/2);
//AjanChart.setModal(true);
 AjanChart.show(true);
 
PierceTimeIndicator.setText(String.valueOf(AjanCutParam.Plasma.PierceDelayTime));
CutHeightIndicator.setText(String.valueOf(AjanCutParam.Plasma.TorchToWorkDistance));
PierceHeightIndicator.setText(String.valueOf(AjanCutParam.Plasma.PierceHeightFactor));
 //CutParametersIndicator.setText(AjanMachine.PlMaterial+AjanMachine.PlCurrent+"A"+AjanMachine.PlThickness+"mm"+AjanMachine.PlGases);// "Mild Steel 260Amp 4mm O2/AIR);
//AjanChart. setVisible(true);
/*Connection conn = null;
   Statement stmt = null;
   try{
      Class.forName("org.apache.derby.jdbc.ClientDriver");

      conn = DriverManager.getConnection(DB_URL,USER,PASS);
      stmt = conn.createStatement();
      String sql;
//      sql = "SELECT \"No\" ,\"Material\",\"Thickness\", \"Current\",\"Gases\"  FROM hplazma";
   sql = "SELECT * FROM hplazma";// WHERE Current='30 Amp'";
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData Rsmt=rs.getMetaData();
            int c=Rsmt.getColumnCount();
            Vector column=new Vector(c);
            for(int i=1;i<=c;i++){
            column.add(Rsmt.getColumnName(i));
            }
            Vector Data =new Vector();
            Vector Row=new Vector();
            while(rs.next()){
            Row=new Vector(c);
for(int i=1;i<=c;i++){
Row.add(rs.getString(i));
}
Data.add(Row);
            }
   JDialog CutChart=new JDialog(this,true);
        
        JTable CutTable=new JTable(Data,column);
        //CutTable.
        CutChart.setTitle("plasma cut charts");
        CutChart.setSize(1600,400);
        CutChart.setBackground(Color.blue);
        CutChart.setForeground(Color.blue);
        CutChart.setLocationRelativeTo(null);
        CutChart.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JScrollPane Jsp=new JScrollPane(CutTable);
        CutChart.setLayout(new BorderLayout());
         CutChart.add(Jsp,BorderLayout.CENTER);
        CutChart.setVisible(true);
            
         rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
*/  
// System.out.println("Goodbye!");
//}//end main
        /*    JDialog CutChart=new JDialog(this,true);
        
        JTable CutTable=new JTable();
        //CutTable.
        CutChart.setTitle("plasma cut charts");
        CutChart.setSize(400,400);
        CutChart.setBackground(Color.blue);
        CutChart.setForeground(Color.blue);
        CutChart.setLocationRelativeTo(null);
        CutChart.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        CutChart.add(CutTable);
        CutChart.setVisible(true);*/
//int returnVal = fc.

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
 

    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
       // MachineParameterCharts MachineChart=new MachineParameterCharts(Stmt);
 MachineChart.show(true);
// Purge.show(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    public void openDxfEssi(File dxf_dosya){
        int dxforessi=0;
        if(dxf_dosya==null){
              final JFileChooser fc = new JFileChooser();
      //border b =new border();
      fc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
int returnVal = fc.showOpenDialog(ajanframe.this);


        if (returnVal == JFileChooser.APPROVE_OPTION) {
        
            if(fc.getSelectedFile().getName().endsWith(".dxf")||fc.getSelectedFile().getName().endsWith(".DXF"))
            {DxfFile = fc.getSelectedFile();}
            else if(fc.getSelectedFile().getName().endsWith(".mpg")||fc.getSelectedFile().getName().endsWith(".MPG")||fc.getSelectedFile().getName().endsWith(".b3")||fc.getSelectedFile().getName().endsWith(".B3"))
            {EssiFile = fc.getSelectedFile();dxforessi=1;}
        
            }
        }
        
        else
        {
        
            if(dxf_dosya.getName().endsWith(".dxf")||dxf_dosya.getName().endsWith(".DXF"))
            {DxfFile = dxf_dosya;}
            else if(dxf_dosya.getName().endsWith(".mpg")||dxf_dosya.getName().endsWith(".MPG")||dxf_dosya.getName().endsWith(".b3")||dxf_dosya.getName().endsWith(".B3"))
            {EssiFile = dxf_dosya;dxforessi = 1;
}
        
        }
            
        //DxfFile.getName();
       //FILE_TO_SEND = DxfFile.getPath();
          try {
           //   sendFile();
           //DrawDxfEssi(canvas.getBackground());
           //DrawDxfEssiVect(true);
           if(dxforessi==1){
           ReadEssi essi=new ReadEssi(EssiFile.getPath());
              dxfVectWithOff=dxfVect=essi.getVect();

           Graph.MJoint.removeAll(Graph.MJoint);
           CutStartObjNo=0;
              CutEndObjNo=dxfVectWithOff.size();
           }
           else{
           ReadDxf dxf=new ReadDxf(DxfFile.getPath());
              dxfVectWithOff=dxfVect=dxf.getVect();
              Graph.MJoint.removeAll(Graph.MJoint);
              CutStartObjNo=0;
              CutEndObjNo=dxfVectWithOff.size();
           }
             // DrawDxfEssiVect(false);
             canvas.repaint();
              //DrawDxfEssi( Color.BLUE);
          } catch (IOException ex) {
              Logger.getLogger("dosya  hatasÄ±");
          }
                                        
//System.out.print("test");
    }
    /*
    public void openEssi(File essi_dosya){
        if(essi_dosya==null){
  final JFileChooser fc = new JFileChooser();
      //border b =new border();
      fc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
int returnVal = fc.showOpenDialog(ajanframe.this);


        if (returnVal == JFileChooser.APPROVE_OPTION) {
            EssiFile = fc.getSelectedFile();}
        }
        
        else   EssiFile = essi_dosya;
        //DxfFile.getName();
       //FILE_TO_SEND = DxfFile.getPath();
          try {
           //   sendFile();
           //DrawDxfEssi(canvas.getBackground());
           DrawDxfEssiVect(true);
           ReadEssi essi=new ReadEssi(EssiFile.getPath());
              dxfVectWithOff=dxfVect=essi.getVect();
              DrawDxfEssiVect(false);
              //DrawDxfEssi( Color.BLUE);
          } catch (IOException ex) {
              Logger.getLogger("dosya gonderme hatasÄ±");
          }
    }*/
    
    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
          openDxfEssi(null);
   
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void toolOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolOffsetActionPerformed
        // TODO add your handling code here:
 //DrawDxfEssi(canvas.getBackground());
         //  DrawDxfEssiVect(true);
           offsetvector off=new offsetvector();
              dxfVectWithOff=off.getVect();
              CutStartObjNo=0;
              CutEndObjNo=dxfVectWithOff.size();
          //    DrawDxfEssiVect(false);
        
    }//GEN-LAST:event_toolOffsetActionPerformed

    
    
     public static  legalProject gecerliproje=new legalProject();
/*public void FilesListDoldur(){
 DefaultListModel dxfliste= new DefaultListModel(); 
 int say=gecerliproje.getkesimDosyasiSayisi();
for(int i=0;i<gecerliproje.getkesimDosyasiSayisi();i++)
{
 dxfliste.addElement(gecerliproje.getkesimDosyasi(i).getName());
}



ProjectFilesList.setModel(dxfliste);
}*/
    
    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        
        //if(!prjNameLabel.getText().equals("Project Name : "))
        if(projeAcik==true)
        {
        if(projeKayitSor()){
        DefaultListModel listmodel=new DefaultListModel();
        ProjectFilesList.setModel(listmodel);
        prjNameLabel.setText("Project Name : ");
        }}
        else
        {
       
        DefaultListModel listmodel=new DefaultListModel();
        ProjectFilesList.setModel(listmodel);
        prjNameLabel.setText("Project Name : ");
        projeAcik=false;
        }
        //ProjectFilesList.remove(1);
        //ProjectFilesList.removeAll();
    }//GEN-LAST:event_jMenuItem13ActionPerformed

/*
    HataFotolari AjanHataFrame=new HataFotolari();
   
public void ShowMesajFoto(String mesaj){

    //AjanHataFrame(new EmptyBorder(5, 5, 5, 5));
//    AjanHataFrame.setUndecorated(true);
  AjanHataFrame.etiketyaz(mesaj);
  AjanHataFrame.getContentPane().setBackground( Color.white );
   AjanHataFrame.show();
   
    
}*/
public void aktifet(boolean deger){
this.setEnabled(deger);
}
Dimension dim;
public void ShowElkontFrame(){

    //AjanHataFrame(new EmptyBorder(5, 5, 5, 5));
//    AjanHataFrame.setUndecorated(true);

dim=Toolkit.getDefaultToolkit().getScreenSize();
 

elkfrm.setLocation(dim.width - elkfrm.getSize().width*5/4 , dim.height - elkfrm.getSize().height*5/4);
//elkfrm.setModalExclusionType(Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
elkfrm.setModal(true);
  
elkfrm.show(true);

//elkfrm.show();

//AjanHataFrame.etiketyaz(mesaj);
//  AjanHataFrame.getContentPane().setBackground( Color.white );
//   AjanHataFrame.show();
   
    
}

    private void ProjectFilesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProjectFilesListMouseClicked
        // TODO add your handling code here:
//BURASIFAHRI

        //File ds=gecerliproje.getkesimDosyasi(ProjectFilesList.getSelectedIndex());
        kesimdosyasi kesdosya=gecerliproje.getorjkesimDosyasi(ProjectFilesList.getSelectedIndex());
        if (evt.getClickCount() == 2) {
        //canvas.repaint();
        
        //super.paintComponents(this.getGraphics());
        //lay1.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
        
        //openDxfEssi(kesdosya.kesimdosya_file);
        
        kesdosya.Material=AjanMachine.PlMaterial;
        kesdosya.Current=AjanMachine.PlCurrent;
        kesdosya.Gases=AjanMachine.PlGases;
        kesdosya.CutType=AjanMachine.PlCutType;
        kesdosya.Thickness=AjanMachine.PlThickness;
        kesdosya.CutCurrent=AjanCutParam.Plasma.CutCurrent;
        kesdosya.CutSpeed=AjanCutParam.Plasma.CuttingSpeed;
        kesdosya.ArcVoltage=AjanCutParam.Plasma.ArcVoltage;
        kesdosya.PierceDelayTime=AjanCutParam.Plasma.PierceDelayTime;
        kesdosya.TorchToWorkDistance=AjanCutParam.Plasma.TorchToWorkDistance;
        kesdosya.PierceHeightFactor=AjanCutParam.Plasma.PierceHeightFactor;
        kesdosya.KerfWidth=AjanCutParam.Plasma.KerfWidth;
        kesdosya.MicroJointThick=AjanCutParam.Plasma.MicroJointThick;
        kesdosya.PrePlasmaPressure=AjanCutParam.Plasma.PrePlasmaPressure;
        kesdosya.PreShieldPressure=AjanCutParam.Plasma.PreShieldPressure;
        kesdosya.CutPlasmaPressure=AjanCutParam.Plasma.CutPlasmaPressure;
        kesdosya.CutShieldPressure=AjanCutParam.Plasma.CutShieldPressure;
        
        
        projeEdit=true;
        
        gecerliproje.setorjkesimDosyasi(ProjectFilesList.getSelectedIndex(),kesdosya);
        ProjeYaz(false);
        //openDxfEssi(gecerliproje.getkesimDosyasi(ProjectFilesList.getSelectedIndex()));
        
            GraphMenu.CutStartObjNo=kesdosya.CutStartObjNo;
            GraphMenu.CutEndObjNo=kesdosya.CutEndObjNo;
            GraphMenu.dxfVectWithOff=kesdosya.dxfVectWithOff;
            GraphMenu.dxfVectWithOff=GraphMenu.dxfVect=kesdosya.dxfvect;
            
dim=Toolkit.getDefaultToolkit().getScreenSize();
 //Graph GraphMenu= new Graph();
GraphMenu.file_index=ProjectFilesList.getSelectedIndex();
GraphMenu.kesdosya=kesdosya;
GraphMenu.set(CX,CY,centerX,centerY,Scale);
GraphMenu.setLocation(dim.width /2- GraphMenu.getSize().width/2 , dim.height/2 - GraphMenu.getSize().height/2);
GraphMenu.setExtendedState(MAXIMIZED_BOTH);
GraphMenu.show(true);

        
        //canvas.repaint();
        }
        
       if(evt.getButton()==MouseEvent.BUTTON3){
        Point mousePos = getMousePosition();
           //jPopupMenu1.show(ProjectFilesList,evt.getX(),evt.getY());
           
           DialogDxfParamFrame dxfparam=new DialogDxfParamFrame();
           //dxfparam.setLocation(evt.getX(),evt.getY());
           dxfparam.kesdosya=kesdosya;
           dxfparam.loadDataBase();
           
           dxfparam.setLocation(mousePos.x,mousePos.y);
           //dxfparam.setLocation(500,500);
                   //ProjectFilesList.getX()+ evt.getX(),ProjectFilesList.getY()+evt.getY());
           //dxfparam.setModal(true);
           dxfparam.show();

       }
                
        
        
    }//GEN-LAST:event_ProjectFilesListMouseClicked

    private void MachineZeroButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MachineZeroButtonMousePressed
        try {
            // TODO add your handling code here:
            //worker.execute();
            socketTcp.close();
            /*AjanPortOut.DRYCUT=false;
            AjanPortOut.F1=false;
            AjanPortOut.AUTOZ=false;
            AjanPortOut.MSF=true;
            AjanPortOut.HANDCONTR=false;*/
        } catch (IOException ex) {
            Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MachineZeroButtonMousePressed

    private void MachineZeroButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MachineZeroButtonMouseReleased
        // TODO add your handling code here:
        AjanPortOut.MSF=false;
         MachineZeroButton.setSelected(false);
    }//GEN-LAST:event_MachineZeroButtonMouseReleased

    private void PAUSEButtonAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_PAUSEButtonAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_PAUSEButtonAncestorAdded

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        
              if(projeKayitSor()){ProjeAc(null);}
//     ProjePenceresikapa=true;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
     ProjeYaz(true);
    //projeKayitSor();
        iniYaz();
     
    
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem11AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jMenuItem11AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem11AncestorAdded

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
 
        gecerliproje.setvectlistesi(dxfVect, dxfVectWithOff);
        gecerliproje.setdosyalistesi(ProjectFilesList);
        FileBrowser nf=new FileBrowser();
        nf.main(new String[] {"C:\\"},gecerliproje);
      
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here:

//ProjePenceresikapa=true;
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
//RefreshPanel();
//CoordinateAxisRefresh(Color.gray);

dim=Toolkit.getDefaultToolkit().getScreenSize();
 /*
ElkontFrame elkfrm=new ElkontFrame();
elkfrm.setLocation(dim.width/2 - elkfrm.getSize().width/2 , dim.height/2 - elkfrm.getSize().height/2);
//elkfrm.setModalExclusionType(Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
elkfrm.setModal(true);
  
elkfrm.show(true);
*/
G5xFrame atamaSayfasi=new G5xFrame();
atamaSayfasi.setLocation(dim.width/2 - atamaSayfasi.getSize().width/2 , dim.height/2 - atamaSayfasi.getSize().height/2);
atamaSayfasi.setModal(true);
atamaSayfasi.show(true);

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void canvasComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_canvasComponentResized
        // TODO add your handling code here:
        centerY=canvas.getHeight()/2;
        centerX=canvas.getWidth()/2;
        CX=(int) (centerX+ShiftX);
        CY=(int) (centerY+ShiftY);
        //CoordinateAxisRefresh(Color.gray);
        //DrawDxfEssiVect(false);
    }//GEN-LAST:event_canvasComponentResized

    private void canvasMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_canvasMouseWheelMoved
        // TODO add your handling code here:
        int rotdir =evt.getWheelRotation();
        double MoveX,MoveY;
        int mMX=canvas.getMousePosition().x;int ecx=CX;int ecy=CY;int emx=MX;int emy=MY;
        int mMY=canvas.getMousePosition().y;
        // DrawDxfEssi(canvas.getBackground());
        //DrawDxfEssiVect(true);
        double EScale=Scale;
        Scale+=.001*rotdir;//*evt.getScrollAmount();
        if(Scale<=0)Scale=0.001;
         CX=ecx+(-ecx+mMX)-(int)(Scale*(-ecx+mMX)/EScale);
          CY=ecy+(-ecy+mMY)-(int)(Scale*(-ecy+mMY)/EScale);
        //CX=(int) (mMX-MX*Scale);
        //CY=(int) (mMY+MY*Scale);
        
        //ShiftX=CX-centerX;
        //ShiftY=CY-centerY;
        
       // DrawDxfEssiVect(false);
       canvas.repaint();
    }//GEN-LAST:event_canvasMouseWheelMoved

    private void canvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed
        // TODO add your handling code here:
//       textField4.setText("pressed");
MouseShiftStX=evt.getX();
MouseShiftStY=evt.getY();
    }//GEN-LAST:event_canvasMousePressed

    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        // TODO add your handling code here:
MouseShiftStX=0;
MouseShiftStY=0;            
//textField4.setText("released");
canvas.repaint();


    }//GEN-LAST:event_canvasMouseReleased

    private void canvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
        // TODO add your handling code here:
   // if(basti==true){
            
MouseShiftStX-=evt.getX();
MouseShiftStY-=evt.getY();
//if(MouseShiftStX!=0||MouseShiftStY!=0){
ShiftX-=MouseShiftStX;
ShiftY-=MouseShiftStY;
    //DrawDxfEssi(canvas.getBackground());
     //DrawDxfEssiVect(true);
CX=(int) (centerX+ShiftX);
CY=(int) (centerY+ShiftY);
//canvas
MouseShiftStX=evt.getX();
MouseShiftStY=evt.getY();
//DrawDxfEssi(canvas.getForeground());}
// DrawDxfEssiVect(false);
//}
//MouseShiftStX=0;
//MouseShiftStY=0;            
            
            
            canvas.repaint();
        
        
        

    }//GEN-LAST:event_canvasMouseDragged

    private void AutoZeroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoZeroButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AutoZeroButtonActionPerformed

    private void AutoZeroButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoZeroButtonMousePressed
        // TODO add your handling code here:
        
    
        AjanPortOut.Reset();
        AjanPortOut.AUTOZ=true;
       // AutoZeroButton.setSelected(true);
   // ShowElkontFrame();
    }//GEN-LAST:event_AutoZeroButtonMousePressed

    private void AutoZeroButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoZeroButtonMouseReleased
        // TODO add your handling code here:
          AjanPortOut.AUTOZ=false;
    }//GEN-LAST:event_AutoZeroButtonMouseReleased

    private void IhsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IhsButtonMousePressed
        // TODO add your handling code here:
        AjanPortOut.SENSEIH=true;
    }//GEN-LAST:event_IhsButtonMousePressed

    private void IhsButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IhsButtonMouseReleased
        // TODO add your handling code here:
        AjanPortOut.SENSEIH=false;
    }//GEN-LAST:event_IhsButtonMouseReleased

    private void keylisten(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keylisten
        // TODO add your handling code here:
        if(KeyEvent.KEY_TYPED.toString().equals("m")) Handy.TorchGoUp=true;
        else Handy.TorchGoUp=true;
    }//GEN-LAST:event_keylisten

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        Handy.TorchGoUp=true;
       //if( evt.getKeyChar()=='m')
    }//GEN-LAST:event_formKeyPressed

    private void ThcHomeButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ThcHomeButtonMousePressed
        // TODO add your handling code here:
        Handy.TorchGoUp=true;
    }//GEN-LAST:event_ThcHomeButtonMousePressed

    private void ThcHomeButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ThcHomeButtonMouseReleased
        // TODO add your handling code here:
        Handy.TorchGoUp=false;
    }//GEN-LAST:event_ThcHomeButtonMouseReleased

    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
int i=0;
        if(evt.getClickCount()==2)
        {
        
dim=Toolkit.getDefaultToolkit().getScreenSize();
 
            GraphMenu.genelproje=true;
            GraphMenu.CutStartObjNo=CutStartObjNo;
            GraphMenu.CutEndObjNo=CutEndObjNo;
            GraphMenu.dxfVectWithOff=dxfVectWithOff;
            GraphMenu.dxfVect=dxfVect;

GraphMenu.set(CX,CY,centerX,centerY,Scale,false);
GraphMenu.setLocation(dim.width /2- GraphMenu.getSize().width/2 , dim.height/2 - GraphMenu.getSize().height/2);
GraphMenu.setExtendedState(MAXIMIZED_BOTH);
GraphMenu.show(true);

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_canvasMouseClicked

    private void PAUSEButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PAUSEButtonMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_PAUSEButtonMousePressed

    private void BacWardResumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BacWardResumeButtonActionPerformed
        // TODO add your handling code here:
         if(dxfVectWithOff.size()>0 &&Job.ResumeEnable){
AjanPortOut.BACKWARD=true;
AjanPortOut.RESUME=false;
RUNButton.setSelected(false);
//AjanPortOut.ABORT=false;
//RESUMEButton.setSelected(false);
ABORTButton.setSelected(false);
SoftAjanPort.ABORT=false;
AjanPortOut.ABORT=SoftAjanPort.ABORT||WirelessAjanPort.ABORT;
SoftAjanPort.PAUSE=false;
AjanPortOut.PAUSE=SoftAjanPort.PAUSE||WirelessAjanPort.PAUSE;
PAUSEButton.setSelected(AjanPortOut.PAUSE);
sayactest=0;
canvas.repaint();
ToCnc();AjanPortOut.F1=true;
        }
else RUNButton.setSelected(false);
    }//GEN-LAST:event_BacWardResumeButtonActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
 if(projeEdit==true){projeKayitSor();
        iniYaz();}
    }//GEN-LAST:event_formWindowClosing

    private void ProjectFilesListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProjectFilesListKeyPressed
        // TODO add your handling code here:
        //vektortazele();
if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE){
gecerliproje.kesimdosyasiCikar(ProjectFilesList.getSelectedIndex());
gecerliproje.setdosyalistesi(ProjectFilesList);
                 gecerliproje.listele();
                vektortazele();
                 //ProjeYaz(false);
            
}

    }//GEN-LAST:event_ProjectFilesListKeyPressed

    
   
    
    private void ProjectFilesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ProjectFilesListValueChanged
        // TODO add your handling code here:
//if(!prjNameLabel.getText().equals("Project Name : ")){
    /*  dxfVect = new java.util.ArrayList<>();
            dxfVectWithOff = new java.util.ArrayList<>();
                    for(int i=0;i<gecerliproje.getkesimDosyasiSayisi();i++)
                    {
                            if(i==0)//dxfVect=gecerliproje.getDxfVectorler(i);
                            dxfVect.addAll(gecerliproje.getDxfVectorler(i));
                        else
                               dxfVect.addAll(gecerliproje.getDxfVectorler(i));
                    }
                    dxfVectWithOff=dxfVect;
                    canvas.repaint();*/
    }//GEN-LAST:event_ProjectFilesListValueChanged

    private void posYIndicatorComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_posYIndicatorComponentMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_posYIndicatorComponentMoved

    private void ThcTypeOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThcTypeOnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ThcTypeOnActionPerformed

    private void ThcTypeOnÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ThcTypeOnÄ°temStateChanged
        // TODO add your handling code here:

        MacPrmInit.ThcOn=false;
        if(ThcTypeOn.isSelected()){
            AjanMachine.ThcType="ON";
            MacPrmInit.ThcOn=true;
            MacPrmInit.ThcAuto=false;
            MacPrmInit.ThcOff=false;
        }
        MachineParameterCharts.RadioStateChange(ThcTypeOn,"ThcType","ON",Stmt);
    }//GEN-LAST:event_ThcTypeOnÄ°temStateChanged

    private void IhsTypeArcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IhsTypeArcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IhsTypeArcActionPerformed

    private void IhsTypeArcÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_IhsTypeArcÄ°temStateChanged
        // TODO add your handling code here:
        MacPrmInit.IhsArc=false;
        if(IhsTypeArc.isSelected()){
            AjanMachine.IhsType="ARC";
            MacPrmInit.IhsOff=false;
            MacPrmInit.IhsArc=true;
            MacPrmInit.IhsOhmic=false;
            MacPrmInit.IhsSw=false;   }

        MachineParameterCharts.RadioStateChange(IhsTypeArc,"IhsType","ARC",Stmt);
    }//GEN-LAST:event_IhsTypeArcÄ°temStateChanged

    private void IhsTypeOhmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IhsTypeOhmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IhsTypeOhmActionPerformed

    private void IhsTypeOhmÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_IhsTypeOhmÄ°temStateChanged
        // TODO add your handling code here:
        MacPrmInit.IhsOhmic=false;
        if(IhsTypeOhm.isSelected()){
            AjanMachine.IhsType="OHM";
            MacPrmInit.IhsOff=false;
            MacPrmInit.IhsArc=false;
            MacPrmInit.IhsOhmic=true;
            MacPrmInit.IhsSw=false;   }

        MachineParameterCharts.RadioStateChange(IhsTypeOhm,"IhsType","OHM",Stmt);
    }//GEN-LAST:event_IhsTypeOhmÄ°temStateChanged

    private void IhsTypeSwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IhsTypeSwActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IhsTypeSwActionPerformed

    private void IhsTypeSwÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_IhsTypeSwÄ°temStateChanged
        // TODO add your handling code here:
        MacPrmInit.IhsSw=false;
        if(IhsTypeSw.isSelected()){
            AjanMachine.IhsType="SW";
            MacPrmInit.IhsOff=false;
            MacPrmInit.IhsArc=false;
            MacPrmInit.IhsOhmic=false;
            MacPrmInit.IhsSw=true;   }

        MachineParameterCharts.RadioStateChange(IhsTypeSw,"IhsType","SW",Stmt);
    }//GEN-LAST:event_IhsTypeSwÄ°temStateChanged

    private void ThcTypeOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThcTypeOffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ThcTypeOffActionPerformed

    private void ThcTypeOffÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ThcTypeOffÄ°temStateChanged
        // TODO add your handling code here:
        MacPrmInit.ThcOff=false;
        if(ThcTypeOff.isSelected()){
            AjanMachine.ThcType="OFF";
            MacPrmInit.ThcOn=false;
            MacPrmInit.ThcAuto=false;
            MacPrmInit.ThcOff=true;
        }
        MachineParameterCharts.RadioStateChange(ThcTypeOff,"ThcType","OFF",Stmt);
    }//GEN-LAST:event_ThcTypeOffÄ°temStateChanged

    private void ThcTypeAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThcTypeAutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ThcTypeAutoActionPerformed

    private void ThcTypeAutoÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ThcTypeAutoÄ°temStateChanged
        // TODO add your handling code here:
        MacPrmInit.ThcAuto=false;
        if(ThcTypeAuto.isSelected()){
            AjanMachine.ThcType="AUTO";
            MacPrmInit.ThcOn=false;
            MacPrmInit.ThcAuto=true;
            MacPrmInit.ThcOff=false;
        }
        MachineParameterCharts.RadioStateChange(ThcTypeAuto,"ThcType","AUTO",Stmt);
    }//GEN-LAST:event_ThcTypeAutoÄ°temStateChanged

    private void IhsTypeOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IhsTypeOffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IhsTypeOffActionPerformed

    private void IhsTypeOffÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_IhsTypeOffÄ°temStateChanged
        // TODO add your handling code here:
        MacPrmInit.IhsOff=false;
        if(IhsTypeOff.isSelected()){
            AjanMachine.IhsType="OFF";
            MacPrmInit.IhsOff=true;
            MacPrmInit.IhsArc=false;
            MacPrmInit.IhsOhmic=false;
            MacPrmInit.IhsSw=false;   }

        MachineParameterCharts.RadioStateChange(IhsTypeOff,"IhsType","OFF",Stmt);
    }//GEN-LAST:event_IhsTypeOffÄ°temStateChanged

    private void CncFaultsMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CncFaultsMainMouseClicked
        // TODO add your handling code here:
        hatayiac=!hatayiac;
    }//GEN-LAST:event_CncFaultsMainMouseClicked
    //}
    /*private void canvasMouseMoved(java.awt.event.MouseEvent evt) {                                  
        // TODO add your handling code here:
//RefreshPanel();        
//canvas.getMousePosition().translate(center, 100);
jLabel6.setText(String.valueOf(canvas.getMousePosition().x-centerX/2.));
jLabel5.setText(String.valueOf(centerY/2.-canvas.getMousePosition().y));

    }//GEN
     */
    
    
    
    
    
    public static void main(String args[]) {
 
  
     //  public static void main(String[] args) {
 
    /*         final Timer myTimer=new Timer();
             TimerTask gorev;
       gorev = new TimerTask() {
           
           @Override
           public void run() {
               //
              String ot="Port Hatasi";
               //textField4.setText(ot);
               //                       System.out.println("Merhaba");
               sayac++;
               if(sayac==5)
                   myTimer.cancel();
           }
       };
 
             myTimer.schedule(gorev,0,3000);

*/

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ajanframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ajanframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ajanframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ajanframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

     
        /* Create and display the form */
     // SwingUtilities.invokeLater(new Runnable() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ajanframe().setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
                }
          
                
                
            }
        });
           // });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JToggleButton ABORTButton;
    private javax.swing.JLabel ArcVoltageIndicator;
    private javax.swing.JLabel ArcVoltageIndicator1;
    private javax.swing.JLabel ArcVoltageIndicator2;
    private javax.swing.JLabel ArcVoltageIndicator3;
    private javax.swing.JToggleButton AutoZeroButton;
    private javax.swing.JToggleButton BacWardResumeButton;
    private javax.swing.JList<String> CncFaultsMain;
    private javax.swing.JLabel CutHeightIndicator;
    public static javax.swing.JLabel CutParametersIndicator;
    private javax.swing.JLabel FeedRateIndicator;
    public javax.swing.JToggleButton GoZeroButton;
    public javax.swing.JToggleButton HandControl;
    private javax.swing.JButton IhsButton;
    public static javax.swing.JRadioButton IhsTypeArc;
    public static javax.swing.JRadioButton IhsTypeOff;
    public static javax.swing.JRadioButton IhsTypeOhm;
    public static javax.swing.JRadioButton IhsTypeSw;
    private javax.swing.JToggleButton MachineZeroButton;
    public javax.swing.JToggleButton PAUSEButton;ArcVoltageIndicator
    private javax.swing.JLabel PierceHeightIndicator;
    private javax.swing.JLabel PierceTimeIndicator;
    private javax.swing.JLabel PlasmaPressureIndicator;
    private javax.swing.JLabel PlasmaPressureIndicator1;
    private javax.swing.JLabel PlasmaPressureIndicator3;
    public javax.swing.JList<String> ProjectFilesList;
    private javax.swing.JToggleButton RESUMEButton;
    public javax.swing.JToggleButton RUNButton;
    private javax.swing.JLabel ShieldPressureIndicator;
    private javax.swing.JButton ThcHomeButton;
    public static javax.swing.JRadioButton ThcTypeAuto;
    public static javax.swing.JRadioButton ThcTypeOff;
    public static javax.swing.JRadioButton ThcTypeOn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    public static java.awt.Canvas canvas;
    private javax.swing.JButton jButton2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panel1;
    private javax.swing.JLabel posTLIndicator;
    private javax.swing.JLabel posTRIndicator;
    private javax.swing.JLabel posYIndicator;
    private javax.swing.JLabel posxIndicator;
    private javax.swing.JLabel prjNameLabel;
    private javax.swing.JMenuItem toolOffset;
    // End of variables declaration//GEN-END:variables

    
  
}
