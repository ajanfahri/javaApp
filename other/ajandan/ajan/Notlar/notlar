/*
DRYRUN                  -> DryRunButton
SELECT CUT OBJECTS      -> CutStartButton
SCRAP CUTTING           -> ScrapButton
OPTIMISE HOLE           -> OptoHoleButton
MICROJOINT              -> MicrojointButton
MARK OBJECTS            -> MarkButton
PIPECUT OBJECTS         -> PipeButton


LIBRARY                 -> GeometryLibrary
ARRAY                   -> ArrayButton
COPY                    -> CopyButton
MOVE                    -> MoveButton
ROTATE                  -> RotateButton
ORDER                   -> OrderButton
EXTRIM                  -> OffsetButton
EXPLODE                 -> ExplodeButton
CUT ORDER               -> ExTrimButton
SCALE                   -> CutOrderButton
OFFSET                  -> ScaleButton

//*****///***/*/*//*/*/*
OptoHoleButton , MicrojointButton Buton renkle yok

BEVEL PROFILE
ONLY C AXIS
PIERCING ANGLE
DONE
*/


MenuSecim(DryRunButton);

MenuSecim(GeometryLibrary);
MenuSecim(ArrayButton);
MenuSecim(CopyButton);
MenuSecim(MoveButton);
MenuSecim(RotateButton);
MenuSecim(OrderButton);

MenuSecim(OffsetButton);
MenuSecim(ExplodeButton);
MenuSecim(ExTrimButton);
MenuSecim(CutOrderButton);
MenuSecim(ScaleButton);


private void MenuSecim(FahriButon GelenButton) {
    
            if(GelenButton.getName()=="DryRunButton"){
                closebuttonwindow();
                GrFunc.DryRunEnable = true;
                GrFunc.DryRunStartEnable = true;
                GrFunc.DryRunPauseEnable = false;
                DryRunFrameOpen(DryRunButton.getLocationOnScreen().x + DryRunButton.getWidth(), DryRunButton.getLocationOnScreen().y);
                ButonRenkle(DryRunButton.getName().toString());
        }
        else if(GelenButton.getName()=="CutStartButton"){
                closebuttonwindow();
                GrFunc.StartSelectEnable = true;
                ToolFrameOpen(CutStartButton.getLocationOnScreen().x + CutStartButton.getWidth(), CutStartButton.getLocationOnScreen().y);
                ButonRenkle(CutStartButton.getName().toString());
        }   
        else if(GelenButton.getName()=="ScrapButton"){
                closebuttonwindow();
                GrFunc.reset();
                GrFunc.ScrapEnable = true;
                 OperationStep = 1;
                set();
        }    
        else if(GelenButton.getName()=="MicrojointButton"){
            MicroJointUygula();
        }
        else if(GelenButton.getName()=="MarkButton"){
                closebuttonwindow();
                GrFunc.MarkerEnable = true;
                ToolFrameOpen(MarkButton.getLocationOnScreen().x + MarkButton.getWidth(), MarkButton.getLocationOnScreen().y);
                ButonRenkle(MarkButton.getName().toString());
        }
        else if(GelenButton.getName()=="PipeButton"){
                GrFunc.reset();
                closebuttonwindow();
                set();
                GrFunc.PipeCutEnable = true;
                ToolFrameOpen(PipeButton.getLocationOnScreen().x, PipeButton.getLocationOnScreen().y + PipeButton.getHeight());


                if (CatchObjectList.size() > 0) {
                    OperationStep = 2;
                } else {
                    OperationStep = 1;
                }
                ButonRenkle(PipeButton.getName().toString());
                CommandLabel.setText("Select Objects For X A Axis");
        }
        else if(GelenButton.getName()=="OptoHoleButton"){
                GrFunc.reset();
                GrFunc.HoleOptimizeEnable = true;
                radius_check();
                canvas1.repaint();
                set();
                CommandLabel.setText(">>Select Objects:");//ERTAN
                ButonRenkle(OptoHoleButton.getName().toString());
        }  

            
     
    }


xw=CX
 layy.draw(new Line2D.Double(
xw + (StrP.x * Scale),
yw - (StrP.y * Scale),
xw + (EndP.x * Scale),
yw - (EndP.y * Scale))
)
;



MoveButton
      GrFunc.reset();
        GrFunc.MoveEnable = true;
        set();
        if (CatchObjectList.size() > 0) {
            OperationStep = 2;
        } else {
            OperationStep = 1;
        }


RotateButton
if (graphworker.isDone()) {
            try {
                graphworker.execute();
                Thread.sleep(200);
            } catch (InterruptedException ex) {
                Logger.getLogger(ajanframe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        GrFunc.reset();
        GrFunc.RotateEnable = true;
        angleofRot = 0;
        set();
        if (CatchObjectList.size() > 0) {
            OperationStep = 2;
        } else {
            OperationStep = 1;
        }



CopyButton
    GrFunc.reset();
        GrFunc.CopyEnable = true;
        // MenuCheck();
        set();
        if (CatchObjectList.size() > 0) {
            OperationStep = 2;
        } else {
            OperationStep = 1;
        }

ArrayButton
        GrFunc.reset();
        GrFunc.ArrayEnable = true;
        set();
        arraysizeinY = arraysizeinX = 0;

        if (CatchObjectList.size() > 0) {
            OperationStep = 2;
        } else {
            OperationStep = 1;
        }

GeometryLibrary
 OpenLibrary();
        ButonRenkle(GeometryLibrary.getName().toString());

OrderButton
order_(false);//CommandLabel.setText(">>Select Objects:");//ERTAN
        ButonRenkle(OrderButton.getName().toString());

OffsetButton
        closebuttonwindow();

        GrFunc.OffsetEnable = true;
        ButonRenkle(OffsetButton.getName().toString());
        ToolFrameOpen(OffsetButton.getLocationOnScreen().x + OffsetButton.getWidth(), OffsetButton.getLocationOnScreen().y);

ExplodeButton
 GrFunc.reset();
        GrFunc.ExplodeEnable = true;
        //OperationStep=1;
        set();
        if (CatchObjectList.size() > 0) {
            OperationStep = 2;
        } else {
            OperationStep = 1;
        }


ExtrimButton
closebuttonwindow();
        GrFunc.reset();
        GrFunc.ExTrimEnable = true;
        ButonRenkle(ExTrimButton.getName().toString());
        ToolFrameOpen(ExTrimButton.getLocationOnScreen().x + ExTrimButton.getWidth(), ExTrimButton.getLocationOnScreen().y);
        set();

CutOrderButton
 if (GrFunc.CutOrder == false) {
            GrFunc.reset();
            GrFunc.CutOrder = true;
            CutOrderList = new java.util.ArrayList<>();
            CommandLabel.setText("Select Shape with order And then press Cut Order again");
            set();
        } else {
            siradegistir();
            //set(CX, CY, centerX, centerY, Scale, false);
            GrFunc.CutOrder = false;
            //CutOrderLabel.setText("Cut Order");
        }

ScaleButton
  GrFunc.reset();
        GrFunc.ScaleEnable = true;
        ButonRenkle(ScaleButton.getName().toString());
        set();
        if (CatchObjectList.size() > 0) {
            OperationStep = 2;
        } else {
            OperationStep = 1;
        }



//****************
BevelButton
   thickToKerf(1, 5);
        BevelObjectNo = -1;
        GrFunc.reset();
        GrFunc.BevelEnable = true;
        set();

CaxisButton
 ButonRenkle(CaxisButton.getName().toString());
        bevel4_(false);
        canvas1.repaint();

PierceAngleSwButon
 GrFunc.reset();
        closebuttonwindow();
        GrFunc.PiercingAngle = true;
        GrFunc.PierceSw = true;
        GrFunc.ShowPierce = true;
        PiercingAngleOpen(PierceAngleSwButon.getLocationOnScreen().x, PierceAngleSwButon.getLocationOnScreen().y + PierceAngleSwButon.getHeight());
//        ToolFrameOpen(PiercingAngleButton.getLocationOnScreen().x, PiercingAngleButton.getLocationOnScreen().y + PiercingAngleButton.getHeight());

        set();

        canvas1.repaint();
        if (CatchObjectList.size() > 0) {
            OperationStep = 2;
        } else {
            OperationStep = 1;
        }

        /*        GrFunc.reset();
        GrFunc.PierceSw = true;
        GrFunc.ShowPierce = true;
        OperationStep = 2;
        canvas1.repaint();*/
        ButonRenkle(PierceAngleSwButon.getName().toString());

BevelDoneButton
  bevel_(false);
        canvas1.repaint();
        ButonRenkle(BevelDoneButton.getName().toString());




        GrFunc.ExplodeEnable = true;
            set();
            if (CatchObjectList.size() > 0) {
                OperationStep = 2;
            } else {
                OperationStep = 1;
            }


set 
ButonRENKLE command label


if (GrFunc.PipeCutEnable) {
            ButonRenkle(PipeButton.getName().toString());
            CommandLabel.setText("Select Objects For X A Axis");
        }
        if (GrFunc.ScrapEnable) {
            ButonRenkle(ScrapButton.getName().toString());
            CommandLabel.setText("Select Scrap Location");
        } else if (GrFunc.BevelEnable) {
            ButonRenkle(BevelButton.getName().toString());
            CommandLabel.setText("Select with Right Click For Enter Bevel Values");
        } else if (GrFunc.ArrayEnable) {
            ButonRenkle(ArrayButton.getName().toString());
            //CommandLabel.setText("Select with Right Click For Enter Bevel Values");
        } else if (GrFunc.CopyEnable) {
            ButonRenkle(CopyButton.getName().toString());
            //CommandLabel.setText("Select with Right Click For Enter Bevel Values");
        } else if (GrFunc.ExplodeEnable) {
            ButonRenkle(ExplodeButton.getName().toString());
            CommandLabel.setText("Select Object For Explode: ");
        } else if (GrFunc.CutOrder) {
            ButonRenkle(CutOrderButton.getName().toString());
        } else if (GrFunc.MoveEnable) {
            ButonRenkle(MoveButton.getName().toString());
        } else if (GrFunc.RotateEnable) {
            ButonRenkle(RotateButton.getName().toString());
        } else if (OperationStep == 0 && GrFunc.ScrapEnable == false) {
            CommandLabel.setText("Select your command: ");
            ButonRenkle("");
        }


MENUSECIM ilgili flag aktif et
SET ise ekrana basilacak mesajları set etmek için

set - > messageSet